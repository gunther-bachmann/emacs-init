#+title: init
#+property: ^ nil
#+property: header-args :tangle ~/.emacs.d/init.el :comments both
* profile settings
  #+begin_src emacs-lisp
    (setq gb--extended-profile t) ;; load extended functionality, set to nil to load only (most) basic functions
  #+end_src
* custom initial settings and functions
  - utility functions etc.
    #+begin_src emacs-lisp
      (setq gb/completion-framework 'ivy) ;; 'helm | 'selectrum | 'ivy
      (setq gb/list-of-faces-to-set '()) ;; list of faces to set after ui init is complete

      (defun is-macos-p ()
        "check whether this system is mac os"
        (if (string-match "darwin" (symbol-name system-type))
            t
          nil))


      ;; copied from spacemacs initialization
      (defmacro gb/do-after-display-system-init (&rest body)
        "If the display-system is initialized, run `BODY', otherwise,
         add it to a queue of actions to perform after the first graphical frame is
         created."
        `(let ((init (cond ((boundp 'ns-initialized) ns-initialized)
                           ;; w32-initialized gets set too early, so
                           ;; if we're on Windows, check the list of fonts
                           ;; instead (this is nil until the graphics system
                           ;; is initialized)
                           ((boundp 'w32-initialized) (font-family-list))
                           ((boundp 'x-initialized) x-initialized)
                           ;; fallback to normal loading behavior only if in a GUI
                           (t (display-graphic-p)))))
           (if init
               (progn
                 ,@body)
             (push (lambda () ,@body) gb--after-display-system-init-list))))
    #+end_src
  - provide measure-time macro
    #+begin_src emacs-lisp
      (defmacro measure-time (&rest body)
        "Measure the time it takes to evaluate BODY and return this in ms."
        (let ((time-sym (gensym 'time)))
          `(let (
                 (,time-sym (current-time)))
             ,@body
             (float-time (time-since ,time-sym)))))

      ;; (measure-time (progn (dotimes (i 100) (1+ 1))))

    #+end_src
* initial settings
  #+begin_src emacs-lisp
    (setq frame-inhibit-implied-resize t)
    (setq use-file-dialog nil)
    (setq visible-bell 1)

    (require 'cl-seq)

    ;; prevent glimpse of un-styled emacs
    (push '(tool-bar-mode 0) default-frame-alist)
    (push '(vertical-scroll-bars) default-frame-alist)

    (set-background-color "black") ;; since dark mode theme is not set yet, do something close

    (unless (is-macos-p) (menu-bar-mode -1)) ;; remove menu bar
    (tool-bar-mode -1) ;; remove tool bar
    (scroll-bar-mode -1) ;; remove scroll bar
    (blink-cursor-mode -1) ;; make sure cursor is not blinking
    (defalias 'yes-or-no-p 'y-or-n-p) ;; use y/n instead of yes/no

  #+end_src
* unset keybindings
  #+begin_src emacs-lisp
    (global-unset-key "\C-z")     ;; (now mapped to prefix -- dash)
    (global-unset-key "\C-\\")     ;; originally switch input method
    (global-unset-key "\C-x\C-k") ;; keyboard makros prefix (now mapped to kill buffer)
    (global-unset-key "\M-%")     ;; replaced by visual-regexp ...
    ;; unbind super key bindings with the given keys
    (dolist (key '(& \, \^ \` \| \~ \?))
      (global-unset-key (kbd (concat "s-" (symbol-name key))))
      (global-unset-key (kbd (concat "s-" (upcase (symbol-name key))))))
    ;; unbind super key bindings with letters (lower and upper case variant)
    (dotimes (i 26)
      (let ((letter (byte-to-string (+ 65 i))))
        (global-unset-key (kbd (concat "s-" letter)))
        (global-unset-key (kbd (concat "s-" (downcase letter))))))
  #+end_src
* custom set variables
  #+begin_src emacs-lisp
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(custom-enabled-themes '(sanityinc-tomorrow-night))
     '(custom-safe-themes
       '("06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" default))
     '(explicit-shell-file-name nil)
     '(initial-frame-alist
       '((fullscreen . fullwidth)
         (height . 50)
         (top . 22)
         (border-width . 10)
         (internal-border-width . 15)))
     '(line-spacing 0.2)
     '(mini-frame-completions-show-parameters
       '((top . 0.7)
         (width . 0.5)
         (left . 0.5)
         (height . 1)
         (background-color . "#251825")
         (border-color . "#654865")))
     '(mini-frame-internal-border-color "#654865")
     '(mini-frame-show-parameters
       '((top . 0.7)
         (width . 0.5)
         (left . 0.5)
         (height . 1)
         (background-color . "#251825")
         (border-color . "#654865")))
     '(org-plantuml-jar-path (concat user-emacs-directory "plantuml.jar"))
     '(package-selected-packages
       '(minimap prettify-greek pretty-mode org-bullets posframe lispy windmove paredit anzu avy-zap avy helpful expand-region undo-tree browse-kill-ring sublimity transpose-frame highlight-indent-guides eglot editorconfig add-node-modules-path web-mode ts-comint tide shell-pop shell-here ivy-prescient prescient all-the-icons-ivy-rich all-the-icons-ivy memoize ivy-rich counsel-tramp counsel-projectile counsel-org-capture-string counsel-jq counsel-css counsel-bbdb counsel ivy dired-sidebar vscode-icon dired-subtree coterm yafolding multiple-cursors ws-butler rainbow-delimiters rainbow-mode rainbow-identifiers company which-key org org-password-manager magit-popup color-theme-sanityinc-tomorrow validate use-package-ensure-system-package s paradox maxframe magit ht exec-path-from-shell))
     '(paradox-github-token t)
     '(plantuml-jar-path (concat user-emacs-directory "plantuml.jar"))
     '(ring-bell-function 'ignore)
     '(safe-local-variable-values
       '((eval defun project-root
               (some)
               "/Users/guntherbachmann/repo/omniweb/")
         (eval defun project-root
               (some)
               "/Users/guntherbachmann/repo/omniweb/frontend/")
         (js-indent-level . 2)
         (json-reformat:indent-width . 2)
         (project-root function
                       (lambda
                         (some)
                         "/Users/guntherbachmann/repo/omniweb/frontend/"))
         (project-root function
                       (lambda nil "/Users/guntherbachmann/repo/omniweb/frontend/"))
         (project-root function
                       (lambda nil "/Users/guntherbachmann/repo/omniweb/"))
         (project-root function
                       (lambda nil "/Users/guntherbachmann/repo/omniweb"))
         (project-root . "/Users/guntherbachmann/repo/omniweb")
         (project-root . "~/repo/omniweb")))
     '(tide-sync-request-timeout 10)
     '(warning-suppress-log-types '((comp))))
  #+end_src
* initialize packaging
  #+begin_src emacs-lisp
    (require 'package)

    ;; package access either through secure https, or insecure http
    (setq use-elpa-mirror nil)

    (if use-elpa-mirror
        (setq package-archives
              '(("myelpa" . "https://raw.githubusercontent.com/gunther-bachmann/myelpa/master/")))
      (progn
        (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                                 ("myelpa" . "https://raw.githubusercontent.com/gunther-bachmann/myelpa/master/")
                                 ("melpa-stable" . "https://stable.melpa.org/packages/")
                                 ;; ("org" . "https://orgmode.org/elpa/") ;; deprecated
                                 ("melpa" . "https://melpa.org/packages/")
                                 ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                                 ("nongnu-devel" . "https://elpa.nongnu.org/nongnu-devel/")
                                 ))

        (setq package-archive-priorities
              '(("myelpa" . 50)  ;; make local highest priority e.g. to restore previos versions
                ("melpa-stable" . 20)  ;; stable is preferred
                ("melpa" . 10)
                ("gnu" . 30)
                ("nongnu" . 30)
                ))))

    (setq package-menu-async nil) ;; defaulting operations to be async (is problematic on windows systems)


    (defun require-package (package)
      "refresh package archives, check package presence and install if it's not installed"
      (if (null (require package nil t))
          (progn
            (let* ((ARCHIVES (if (null package-archive-contents)
                                 (progn (package-refresh-contents)
                                        package-archive-contents)
                               package-archive-contents))
                   (AVAIL (assoc package ARCHIVES)))
              (if AVAIL
                  (package-install package)))
            (require package))))

    (setq package-to-install-initially
          '( dash
             ht
             maxframe
             bind-key
             ;; key-chord
             validate
             use-package
             seq
             ;; see here https://github.com/jabranham/system-packages
             ;; allows for system manager actions (detecting the system manager)
             system-packages
             ;; see here  https://github.com/jwiegley/use-package
             ;; makes sure that a system program is installed
             use-package-ensure-system-package
             s))

    ;; add mac specific packages
    (when (is-macos-p)
      (add-to-list 'package-to-install-initially 'exec-path-from-shell))

    (dolist (package package-to-install-initially)
      (progn
        (message (concat "Preinstall/require " (symbol-name package)))
        (require-package package)))


    (use-package paradox
      :after (hydra)
      :commands paradox-list-packages
      :bind (:map paradox-menu-mode-map ("<f1>" . hydra-paradox-list-packages/body))
      :config
      (progn
        (setq paradox-automatically-star nil)
        (setq paradox-column-width-package 30)
        (setq paradox-column-width-version 17)
        (when (package-installed-p 'hydra)
          (defhydra hydra-paradox-list-packages ()
            "
              [_v_] view homepage           [_x_] execute commands
              [_l_] show latest commits     [_i_] install
               ^ ^                          [_d_] delete
               ^ ^                          [_U_] update all
           %s(hydra-combine-functions-w-key-bindings
             '((\"    view homepage      \" . paradox-menu-visit-homepage)
               (\"    show latest commit \" . paradox-menu-view-commit-list)
               (\"    execute commands   \" . paradox-menu-execute)
               (\"    install            \" . package-menu-mark-install)
               (\"    delete             \" . package-menu-mark-delete)
               (\"    mark upgrades      \" . package-menu-mark-upgrades)))
           "
            ("v" paradox-menu-visit-homepage)
            ("l" paradox-menu-view-commit-list)
            ("x" paradox-menu-execute :exit t)
            ("i" package-menu-mark-install )
            ("d" package-menu-mark-delete)
            ("U" package-menu-mark-upgrades)
            ("q" (message "Abort") :exit t)))))
  #+end_src
* theming and fonts
  #+begin_src emacs-lisp
    (setq line-spacing 0.2)
    (setq inhibit-compacting-font-caches t)
    (setq gb/default-font "Fira Code")

    (use-package color-theme-sanityinc-tomorrow
      :ensure t
      :config
      (progn
        (setq gb/theme-mode 'night)
        (color-theme-sanityinc-tomorrow gb/theme-mode)
        ;; (toggle-frame-fullscreen)
        (cond
         ((eq gb/theme-mode 'light) nil) ;; TODO complete

         )))

    (when (window-system)
      (set-frame-font gb/default-font))

    ;; ligatures
    (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                   (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                   (36 . ".\\(?:>\\)")
                   (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                   (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                   (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
                   (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                   (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                   (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                   (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                   (48 . ".\\(?:x[a-zA-Z]\\)")
                   (58 . ".\\(?:::\\|[:=]\\)")
                   (59 . ".\\(?:;;\\|;\\)")
                   (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                   (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                   (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                   (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                   (91 . ".\\(?:]\\)")
                   (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                   (94 . ".\\(?:=\\)")
                   (119 . ".\\(?:ww\\)")
                   (123 . ".\\(?:-\\)")
                   (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                   (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
                   )
                 ))
      (dolist (char-regexp alist)
        (set-char-table-range composition-function-table (car char-regexp)
                              `([,(cdr char-regexp) 0 font-shape-gstring]))))

    (defun gb/get-font-heights (display-width win-system)
      "Get font heights depending on display width"
      (if (memq win-system '(mac ns))
          (cond ((> display-width 3400)
                 (ht ('default-height 150) ('variable-pitch-height 140)))
                ((ht ('default-height 130) ('variable-pitch-height 120))))
        (cond ((eq gb/dual-screen-mode 'presentation)
               (ht ('default-height 250) ('variable-pitch-height 250)))
              ((> display-width 5000)
               (ht ('default-height 140) ('variable-pitch-height 140)))
              ((> display-width 3400)
               (ht ('default-height 130) ('variable-pitch-height 130)))
              ((> display-width 1400)
               (ht ('default-height 110) ('variable-pitch-height 110)))
              ((ht ('default-height 85) ('variable-pitch-height 85))))))


    (defun gb/get-font-weights (win-system)
      "Get font weights depending on windowing system"
      (if (memq win-system '(mac ns))
          (ht ('default-weight 'light) ('variable-pitch-weight 'regular))
        (ht ('default-weight 'regular) ('variable-pitch-weight 'regular))))


    (setq gb/setup-main-fonts-needs-execution t)
    (defun gb/setup-main-fonts (&optional frame)
      "Set up default fonts.

           Use DEFAULT-HEIGHT for default face and VARIABLE-PITCH-HEIGHT
           for variable-pitch face."
      (when gb/setup-main-fonts-needs-execution
        (let* ((attr-map (ht-merge (gb/get-font-heights (x-display-pixel-width) window-system)
                                   (gb/get-font-weights window-system))))
          (message "setting up default fonts")
          (message (format "display pixel width %d" (x-display-pixel-width)))
          ;; (set-default-font gb/default-font)

          (apply 'custom-set-faces gb/list-of-faces-to-set)
          ;; (set-frame-font gb/default-font t nil)
          ;; (set-face-font 'default gb/default-font nil)
          (set-face-attribute 'default nil
                              ;; :family gb/default-font
                              :font gb/default-font
                              :height (ht-get attr-map 'default-height)
                              :weight (ht-get attr-map 'default-weight))
          (set-face-attribute 'variable-pitch nil
                              ;; :family "Fira Sans"
                              :height (ht-get attr-map 'variable-pitch-height)
                              :weight (ht-get attr-map 'variable-pitch-weight))
          (setq gb/setup-main-fonts-needs-execution nil))))

    (defun gb/reset-main-fonts ()
      "reinitialize fonts e.g. if resolution changed etc."
      (interactive)
      (setq gb/setup-main-fonts-needs-execution t)
      (setq doom-modeline--font-width-cache nil)
      (gb/setup-main-fonts))

    ;; (gb/setup-main-fonts)
    (gb/do-after-display-system-init (gb/setup-main-fonts))

    (defvar serif-preserve-default-list nil
      "A list holding the faces that preserve the default family and
      height when TOGGLE-SERIF is used.")
    (setq serif-preserve-default-list
          '(;; LaTeX markup
            font-latex-math-face
            font-latex-sedate-face
            font-latex-warning-face
            ;; org markup
            org-latex-and-related
            org-meta-line
            org-verbatim
            org-block-begin-line
            ;; syntax highlighting using font-lock
            font-lock-builtin-face
            font-lock-comment-delimiter-face
            font-lock-comment-face
            font-lock-constant-face
            font-lock-doc-face
            font-lock-function-name-face
            font-lock-keyword-face
            font-lock-negation-char-face
            font-lock-preprocessor-face
            font-lock-regexp-grouping-backslash
            font-lock-regexp-grouping-construct
            font-lock-string-face
            font-lock-type-face
            font-lock-variable-name-face
            font-lock-warning-face))

    (defun toggle-serif ()
      "Change the default face of the current buffer to use a serif family."
      (interactive)
      (when (display-graphic-p)  ;; this is only for graphical emacs
        ;; the serif font familiy and height, save the default attributes
        (let ((serif-fam "Liberation Serif")
              (serif-height 120)
              (default-fam (face-attribute 'default :family))
              (default-height (face-attribute 'default :height)))
          (if (not (bound-and-true-p default-cookie))
              (progn (make-local-variable 'default-cookie)
                     (make-local-variable 'preserve-default-cookies-list)
                     (setq preserve-default-cookies-list nil)
                     ;; remap default face to serif
                     (setq default-cookie
                           (face-remap-add-relative
                            'default :family serif-fam :height serif-height))
                     ;; keep previously defined monospace fonts the same
                     (dolist (face serif-preserve-default-list)
                       (add-to-list 'preserve-default-cookies-list
                                    (face-remap-add-relative
                                     face :family default-fam :height default-height)))
                     (message "Turned on serif writing font."))
            ;; undo changes
            (progn (face-remap-remove-relative default-cookie)
                   (dolist (cookie preserve-default-cookies-list)
                     (face-remap-remove-relative cookie))
                   (setq default-cookie nil)
                   (setq preserve-default-cookies-list nil)
                   (message "Restored default fonts."))))))
  #+end_src
* modeline
  #+begin_src emacs-lisp
    (use-package all-the-icons
      :ensure t
      ;; :after ( memoize) ;; font-lock+
      :config
      ;; extend list of all-the-icons-mode-icon-alist
      ;; by
      ;; (typescript-mode all-the-icons-fileicon "typescript" :v-adjust -0.1 :face all-the-icons-yellow)
      ;; (tide-mode all-the-icons-fileicon "typescript" :v-adjust -0.1 :face all-the-icons-yellow)
      (with-eval-after-load 'all-the-icons
        (progn
          (add-to-list 'all-the-icons-mode-icon-alist '(typescript-mode all-the-icons-fileicon "typescript" :v-adjust -0.1 :face all-the-icons-yellow) t)
          (add-to-list 'all-the-icons-mode-icon-alist '(tide-mode all-the-icons-fileicon "typescript" :v-adjust -0.1 :face all-the-icons-yellow) t)
          )))

    (use-package doom-modeline
      :disabled t
      ;; :after (all-the-icons)
      :config
      (setq gb/cached-file-remote-p-hash (make-hash-table :test 'equal))
      (setq gb/original-file-remote-p #'file-remote-p)
      (setq doom-modeline-icon t)
      (setq doom-modeline-enable-word-count nil)
      (setq doom-modeline-unicode-fallback nil)
      (setq doom-modeline-modal-icon t)
      (setq doom-modeline-irc nil) ;; check
      (setq doom-modeline-persp-icon nil)
      (setq doom-modeline-persp-name nil)
      (setq doom-modeline-gnus-timer nil)
      (setq doom-modeline-workspace-name nil)
      (setq doom-modeline-env-version nil)
      (setq doom-modeline-checker-simple-format t)
      (setq doom-modeline-buffer-file-name-style 'file-name)
      (setq doom-modeline--font-width-cache nil)
      (defun doom-modeline--font-width ()
        "Cache the font width."
        (or doom-modeline--font-width-cache
           (let ((width (window-font-width nil 'mode-line)))
             (setq doom-modeline--font-width-cache width)
             width)))

      (setq doom-modeline-vcs-max-length 40)
      (setq inhibit-compacting-font-caches t)
      (setq doom-modeline-height 1)
      (setq doom-modeline-project-detection 'ffip)
      (cond
       ((eq gb/theme-mode 'light) nil) ;; TODO complete
       (t (progn
            (--each '((doom-modeline-bar ((t (:background "#600060"))))
                      (doom-modeline-bar-inactive ((t (:background "#500050"))))
                      (mode-line ((t (:background "#251422" :foreground "#808080" :overline "#504050" :weight normal))))

                  (mode-line-inactive ((t (:inherit mode-line :background "#251422" :foreground "#969896" :weight normal)))))
              (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it))))))
      (doom-modeline-mode 1))

    (use-package memoize
      :ensure t)

    ;; custom mode line

    (setq auto-revert-check-vc-info t)
    (setq mode-line-position-column-line-format '(" %5l:%4c"))
    (column-number-mode 1)

    ;; (use-package modeline-region
    ;;   :load-path "~/.emacs.d/additionals/"
    ;;   :config
    ;;   (global-modeline-region-mode 1))

    (use-package diminish
      :ensure t)

    (defun gb/ignore-modeline-updates-advice (orig-fun &rest args)
      (setq gb/disable-modeline-updates t)
      (unwind-protect
          (apply orig-fun args)
        (setq gb/disable-modeline-updates nil)))

    (when (fboundp #'sublimity-scroll--vscroll-effect)
      (advice-add 'sublimity-scroll--vscroll-effect :around #'gb/ignore-modeline-updates-advice))
    (when (fboundp #'sublimity-scroll--hscroll-effect)
      (advice-add 'sublimity-scroll--hscroll-effect :around #'gb/ignore-modeline-updates-advice))

    (advice-add 'next-line :around #'gb/ignore-modeline-updates-advice)
    (advice-add 'previous-line :around #'gb/ignore-modeline-updates-advice)
    (advice-add 'right-char :around #'gb/ignore-modeline-updates-advice)
    (advice-add 'left-char :around #'gb/ignore-modeline-updates-advice)
    (advice-add 'forward-word :around #'gb/ignore-modeline-updates-advice)
    (advice-add 'backward-word :around #'gb/ignore-modeline-updates-advice)

    (defvar gb/mode-line--last-padding-cache 0 "cached length of righ aligned mode line")
    (defvar gb/mode-line--last-shortened-filename-cache nil "cached filename")
    (defvar gb/disable-modeline-updates nil)

    (defun gb/mode-line-padding ()
      (let ((r-length (if gb/disable-modeline-updates
                          gb/mode-line--last-padding-cache
                        (+ (length (replace-regexp-in-string
                                    ":[a-zA-Z]+:" "LL"
                                    (format-mode-line right-global-mode-string)))
                           (if (and (fboundp 'mlscroll-mode) mlscroll-mode (gb/modeline-line-selected-window-active-p)) 5 -2)))))
        (when (not gb/disable-modeline-updates)
          (setq gb/mode-line--last-padding-cache r-length))
        (propertize " "
                    'display `(space :align-to (- right ,r-length)))))

    (defun gb/string-replace-prefix (prefix replacement str)
      (if (string-prefix-p prefix str)
          (concat replacement (string-remove-prefix prefix str))
        str))

    (memoize #'project-current 60)

    (defun gb/reorder-filename (filename)
      (let ((elements (split-string filename "/")))
        (if (< (length elements) 2)
            (propertize filename 'face 'mode-line-emphasis)
          (concat (propertize (car (last elements)) 'face 'mode-line-emphasis) " " (string-join (butlast elements) "/")))))

    (defun shorten-buffer-filename (fn)
      (if (and gb/disable-modeline-updates gb/mode-line--last-shortened-filename-cache)
          gb/mode-line--last-shortened-filename-cache
        (let* ((sfn
                (when-let* ((prop-fn fn))
                  (->>
                   (if-let* ((project (project-current nil default-directory))
                             (project-root (string-remove-suffix "/" (expand-file-name (cdr project)))))
                       (gb/string-replace-prefix project-root (propertize "-" 'face '(:foreground "orange")) prop-fn)
                     (gb/string-replace-prefix (expand-file-name "~") (propertize "~" 'face '(:foreground "green")) prop-fn))
                   (gb/string-replace-prefix "/sudo:root@pe-nixos:" (concat (propertize "sudo" 'face '(:foreground "red")) ":"))
                   (replace-regexp-in-string "/nix/store/[a-z0-9]+-" (concat (propertize "[n-store]" 'face '(:foreground "#A01010")) ":"))
                   (replace-regexp-in-string "/gnu/store/[a-z0-9]+-" (concat  (propertize "[store]" 'face '(:foreground "#A01010")) ":"))
                   (replace-regexp-in-string "/src/main/\\(java\\|scala\\|kotlin\\)/" (concat ":" (propertize "[src]" 'face '(:foreground "#A01010")) ":"))
                   (replace-regexp-in-string "/src/test/\\(java\\|scala\\|kotlin\\)/" (concat ":" (propertize "[tst]" 'face '(:foreground "#10A010")) ":")))))
               (psfn (gb/reorder-filename sfn)))
          (setq gb/mode-line--last-shortened-filename-cache psfn)
          psfn)))

    (defun get-project-relative-buffer-filename ()
      (when-let* ((fn (buffer-file-name)))
        (shorten-buffer-filename fn)))

    (defun propertize-base-name (filename)
      (when filename
        (if-let* ((path-elements (split-string filename "/"))
                  (last-pe (car (last path-elements)))
                  (last-pe-propertized (propertize last-pe 'face 'mode-line-emphasis)))
            (if (> (length path-elements) 1)
                (string-join (list (string-join (butlast path-elements) "/") last-pe-propertized) "/")
              last-pe-propertized)
          filename)))

    ;; Keep track of selected window, so we can render the modeline differently
    (defvar gb/modeline-line-selected-window (frame-selected-window))
    (defun gb/modeline-line-set-selected-window (&rest _args)
      (when (not (minibuffer-window-active-p (frame-selected-window)))
        (setq gb/modeline-line-selected-window (frame-selected-window))
        (force-mode-line-update)))
    (defun gb/modeline-line-unset-selected-window ()
      (setq gb/modeline-line-selected-window nil)
      (force-mode-line-update))
    (add-hook 'window-configuration-change-hook #'gb/modeline-line-set-selected-window)
    (add-hook 'focus-in-hook #'gb/modeline-line-set-selected-window)
    (add-hook 'focus-out-hook #'gb/modeline-line-unset-selected-window)
    (advice-add 'handle-switch-frame :after #'gb/modeline-line-set-selected-window)
    (add-hook 'window-selection-change-functions #'gb/modeline-line-set-selected-window)
    (defun gb/modeline-line-selected-window-active-p ()
      (eq gb/modeline-line-selected-window (selected-window)))

    (setq left-global-mode-string
          (list
           '((:eval
              (cond
               ((buffer-modified-p)
                (propertize " + " 'face (if (gb/modeline-line-selected-window-active-p)
                                            (if (buffer-file-name)
                                                '(:foreground "red")
                                              '(:foreground "green"))
                                          'mode-line-inactive)))
               (buffer-read-only
                (propertize " - " 'face (if (gb/modeline-line-selected-window-active-p)
                                            '(:foreground "#008000" :weight bold)
                                          'mode-line-inactive)))
               ((not (buffer-modified-p))
                (propertize " ⨯ " 'face (if (gb/modeline-line-selected-window-active-p)
                                            '(:foreground "orange")
                                          'mode-line-inactive))))))

           ;; 'mode-line-position
           "%5l:" (propertize "%4c" 'face '(:foreground "#606060"))

           " "
           '(:eval
             (when (or (assoc major-mode all-the-icons-mode-icon-alist)
                      (assoc (get major-mode 'derived-mode-parent) all-the-icons-mode-icon-alist))
               (propertize (apply #'all-the-icons-icon-for-mode `(,major-mode
                                                                  :height ,(/ all-the-icons-scale-factor 1.5)
                                                                  :v-adjust -0.03
                                                                  ,@(unless (gb/modeline-line-selected-window-active-p) '(:face mode-line-inactive)))))))
           " "
           ;; Show the file name with sanitized
           '(:eval (let ((id (or (get-project-relative-buffer-filename)
                                mode-line-buffer-identification)))
                     (if (gb/modeline-line-selected-window-active-p)
                         id
                       (if (stringp id)
                           (substring-no-properties id)
                         (substring-no-properties (format-mode-line id))))))

           '(:eval (when (and (not (buffer-file-name)) (gb/modeline-line-selected-window-active-p))
                     (shorten-buffer-filename default-directory)))))

    (setq right-global-mode-string
          (append  (list  ;; eglot--mode-line-format
                    ;; flycheck-mode-line " "
                    ;; minor-mode-alist
                    '(:eval (if (gb/modeline-line-selected-window-active-p)
                                mode-line-modes
                              (substring-no-properties (format-mode-line mode-line-modes))))
                    ;; '(:eval (when text-scale-mode (concat " (𝞿" text-scale-mode-lighter ") ")))
                    mode-line-misc-info)
                   (list mode-line-process)))

    (setq-default mode-line-format
                  (list  left-global-mode-string
                         '(:eval (gb/mode-line-padding))
                         right-global-mode-string))


  #+end_src
* systemspecific settings
** mac specific (if running on mac)
   #+begin_src emacs-lisp
     (when (string-equal "ns" (window-system))
       ;; fonts anti-aliasing einschalten
       (setq mac-allow-anti-aliasing t)

       ;; Some mac-bindings interfere with Emacs bindings.
       (when (boundp 'mac-pass-command-to-system)
         (setq mac-pass-command-to-system nil))
       ;; Some mac-bindings interfere with Emacs bindings.
       (when (boundp 'mac-pass-control-to-system)
         (setq mac-pass-control-to-system nil))

       ;; Make sure the right alt key is not bound to meta (such that the right alt key can be used on a mac to create []{}...)
       (setq ns-command-modifier 'super)
       (setq ns-function-modifier 'hyper)
       (setq ns-alternate-modifier 'meta)
       (setq ns-control-modifier 'control)
       (setq ns-right-command-modifier 'super)

       ;; on macos x the right alt key is used to get e.g. the pipe '|' (alt-7)
       (setq ns-right-alternate-modifier nil) ;; 'meta

       ;; make sure this is run before anything else, since all shell program starts need the correct path
       ;; exec-path-from-shell alread required (w/i initial package setup)
       (when (is-macos-p)
         (require 'exec-path-from-shell)
         (exec-path-from-shell-initialize)
         (exec-path-from-shell-copy-envs
          '("PATH"))))
   #+end_src
* font lock configuration
  #+begin_src emacs-lisp
    (require 'jit-lock)

    (setq jit-lock-contextually nil        ;; 'syntax-driven
          jit-lock-defer-contextually nil  ;; is an alias for 'jit-lock-contextualy
          jit-lock-context-time 0.5      ;; 0.2
          jit-lock-defer-time 0          ;; 0.2
          jit-lock-stealth-load 200      ;; 200
          jit-lock-stealth-nice 1        ;; 0.2
          jit-lock-stealth-time 1        ;; 0.2
          jit-lock-chunk-size 500)       ;; default is 500
    (setq-default font-lock-multiline nil) ;; NEVER EVER SET THIS TO TRUE!!!!, makes opening this file a multi minute thing

    (setq font-lock-support-mode 'jit-lock-mode)
    (global-font-lock-mode 1)
  #+end_src
* utils
  #+begin_src emacs-lisp
    (use-package memoize
      :ensure t)
    (use-package async
      :ensure t)
  #+end_src
* prettify
  #+begin_src emacs-lisp
    ;; ================================================================================ prettify
    (use-package pretty-mode
      :ensure t
      :config
      (progn
        ;; (global-pretty-mode 1)
        ;; (global-prettify-symbols-mode 1)
        (setq prettify-symbols-unprettify-at-point t)

        (--each '(racket-mode-hook
                  emacs-lisp-mode-hook
                  latex-mode-hook
                  kotlin-mode-hook
                  scala-mode-hook
                  html-mode-hook
                  maxima-mode-hook
                  clojure-mode-hook
                  python-mode-hook)
          (when (boundp it)
            (add-hook it 'turn-on-pretty-mode)))

        ;; make sure this does not collide with symbols from fira code symbol replacement (ligatures)
        (pretty-deactivate-groups
         '(:equality :ordering :ordering-double :ordering-triple
                     :arrows :arrows-twoheaded :punctuation :arithmetic :arithmetic-double))
        (pretty-activate-groups
         '(:sub-and-superscripts :greek :arithmetic-nary))
        ))

    (use-package prettify-greek
      :ensure t
      :config
      (defun gb/uglify-greek-symbols ()
        ""
       (setq prettify-symbols-alist (cl-set-difference prettify-symbols-alist
                       prettify-greek-lower))
       (prettify-symbols-mode t))

      (defun gb/prettify-greek-symbols ()
        ""
        (setq prettify-symbols-alist (append prettify-symbols-alist prettify-greek-lower))
        (prettify-symbols-mode t))

      (add-hook 'emacs-lisp-mode-hook
               (lambda ()
                 (gb/prettify-greek-symbols)
                 (prettify-symbols-mode t))))
  #+end_src
* git
  #+begin_src emacs-lisp
    (use-package blamer
      :ensure t
      :custom (blamer_idle_time 2)
              (blamer_min_offset 100))

    (use-package ediff
      ;; :ensure t ;; internal packages seem not load correctly if ensured
      :config
      ;; make sure that ediff session does not open control window in separate frame, which mixes up exwm
      (setq ediff-window-setup-function (quote ediff-setup-windows-plain))
      (cond
       ((eq gb/theme-mode 'light) nil) ;; TODO complete
       (t (progn
            (--each '( (diff-removed ((t (:background "red" :foreground "#663333"))))
                       (diff-refine-added ((t (:background "green" :foreground "#336633"))))

                       (magit-diff-added ((t (:background "#273C26" :foreground "#ddffdd"))))
                       (magit-diff-added-highlight ((t (:background "#223822" :foreground "#cceecc"))))
                       (magit-diff-removed ((t (:background "#442222" :foreground "#ffdddd"))))
                       (magit-diff-removed-highlight ((t (:background "#442222" :foreground "#eecccc"))))
                       (magit-diffstat-removed ((t (:foreground "#aa4444"))))

                       (ediff-current-diff-C ((t (:background "#444417"))))
                       (ediff-fine-diff-C ((t (:background "#555520"))))
                       (ediff-odd-diff-C ((t (:background "#555555"))))
                       (ediff-even-diff-C ((t (:background "#555555"))))
                       (ediff-fine-diff-B ((t (:background "#176517"))))
                       (ediff-fine-diff-A ((t (:background "#751717")))))
              (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it)))))))
    (use-package magit-popup
      :ensure t
      :after ( async))
    (use-package magit
      :ensure t
      ;; :after ( helm counsel async dash with-editor git-commit magit-popup)
      :commands magit-status magit-list-repositories
      :custom ((magit-fetch-arguments (quote ("--prune")))
               (magit-item-highlight-face nil)
               (magit-last-seen-setup-instructions "1.4.0")
               (magit-log-arguments (quote ("--graph" "--color" "--decorate" "-n200")))
               (magit-pull-arguments (quote ("--rebase")))
               (magit-use-overlays nil)
               (magit-diff-refine-hunk t)
               (magit-diff-adjust-tab-width t)
               (magit-diff-highlight-trailing t)
               (magit-diff-hide-trailing-cr-characters t)
               (magit-display-buffer-function (quote magit-display-buffer-fullframe-status-v1))
               (magit-section-initial-visibility-alist
                (quote
                 ((staged . show)
                  (unpushed . show)
                  (stashes . show)
                  (unpulled . show))))
               (magit-repository-directories '(( "~/repo" . 3)))
               (magit-log-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18) "format the margin in log view"))
      :bind (("C-c v s" . magit-status)
             ("C-c v l" . magit-list-repositories)
             :map magit-mode-map
             ("s-f" . projectile-find-file)
             ("C-x f" . counsel-git))
      :init
      (progn

        (defun gb/magit-assume-unchanged ()
          "assume current file (or selection of files) to be unchanged"
          (interactive)
          (let* ((atpoint (magit-section-value-if 'file))
                 (files (magit-region-values 'file t)))
            (if files
                (-each files
                  (lambda (file)
                    (magit-call-git "update-index" "--assume-unchanged" file)))
              (magit-call-git "update-index" "--assume-unchanged" atpoint)))
          (magit-refresh))

        (defun gb/magit--get-assumed-unchanged ()
          "list of files currently assumed unchanged in git index"
          (--filter (not (string-empty-p it))
                    (s-split "\n" (shell-command-to-string "git ls-files -v | grep '^h' | sed -e 's/^h //g'"))))

        (defun gb/magit-show-assumed-unchanged ()
          ""
          (interactive)
          (let* ((buffer (generate-new-buffer (generate-new-buffer-name "*magit - assumed unchanged*"))))
            (with-current-buffer buffer
              (--each (gb/magit--get-assumed-unchanged)
                (insert it "\n")))
            (switch-to-buffer buffer)))

        (defun gb/magit-restore-assumed-unchanged ()
          "restore all assumed unchanged"
          (interactive)
          (--each (gb/magit--get-assumed-unchanged)
            (shell-command-to-string (format "git update-index --no-assume-unchanged \"%s\"" it)))
          (magit-refresh))

        (defun gb/shell-command-to-exit-code-and-string (command)
          "Run COMMAND and return the exit code (as int) and output (as string) in a pair ( exit-code . output-string )"
          (with-temp-buffer
            `(,(apply 'call-process shell-file-name nil (current-buffer) nil (list shell-command-switch command)) .
              ,(s-trim (buffer-string)))))

        (defun gb/magit-log-trace-definition ()
          "Show log for the definition marked."
          (interactive)
          (let ((fname  (or (magit-file-relative-name)
                           (user-error "Buffer isn't visiting a file")))
                (fn (or (buffer-substring-no-properties (region-beginning) (region-end))
                       (user-error "function not marked")))
                (rev (or magit-buffer-refname
                        (magit-get-current-branch)
                        "HEAD")))
            (magit-log-trace-definition fname fn rev)))

        (defun gb/disable-smartscan ()
          "disable smartscan (if present)"
          (when (fboundp #'smartscan-mode)
            (smartscan-mode -1))))

      (add-hook 'magit-mode-hook 'gb/disable-smartscan)
      :config
      (require 'magit-mode)
      ;; use magit-describe-section-briefly to find out section name (first element in square brackets [])

      ;; otherwiese use regular completing read function
      (when (eq gb/completion-framework 'ido)
        (setq magit-completing-read-function 'magit-ido-completing-read))
      (when (eq gb/completion-framework 'helm)
        (setq magit-completing-read-function 'helm--completing-read-default))

      ;; allow (magit-status "/yadm::") to open yadm repository
      (when (executable-find "yadm")
        (bind-key "C-c v y" #'(lambda () (interactive) (magit-status "/yadm::")))
        (require 'tramp)
        (add-to-list 'tramp-methods
                     '("yadm"
                       (tramp-login-program "yadm")
                       (tramp-login-args (("enter")))
                       (tramp-login-env (("SHELL") ("/bin/sh")))
                       (tramp-remote-shell "/bin/sh")
                       (tramp-remote-shell-args ("-c")))))

      ;; make sure that magit closes all other windows on the frame
      ;; (when (fboundp 'gb/display-buffer-fullframe)
      ;;   (add-to-list 'display-buffer-alist
      ;;                `(,(rx "*magit: ")
      ;;                  (gb/display-buffer-fullframe)
      ;;                  (reusable-frames . nil))))
      )

    (use-package magit-lfs
      :ensure t
      :commands (magit-lfs))

    (use-package git-gutter
      :ensure t
      :config
      (progn
        (cond
         ((eq gb/theme-mode 'light) nil) ;; TODO complete
         (t (progn
              (--each '((git-gutter:unchanged ((t (:background "orange4")))))
                (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it))))))
        (setq git-gutter-added-sign".")))

    (use-package git-gutter-fringe
      :ensure t
      :after ( git-gutter)
      :config
      (global-git-gutter-mode +1)
      (fringe-helper-define 'git-gutter-fr:added nil
        "........"
        "........"
        "...X...."
        "..XXX..."
        "...X...."
        "........"
        "........"
        "........")

      (fringe-helper-define 'git-gutter-fr:deleted nil
        "........"
        "........"
        "........"
        "..XXX..."
        "........"
        "........"
        "........"
        "........")

      (fringe-helper-define 'git-gutter-fr:modified nil
        "........"
        "........"
        "....X..."
        "...X...."
        "....X..."
        "........"
        "........"
        "........"))

    (use-package magit-delta
      :ensure t
      :custom (magit-delta-delta-args '("--max-line-distance" "0.6" "--24-bit-color" "always" "--color-only" "--dark"))
      :config
      ;; (setq magit-delta-default-light-theme "ansi-light")
      ;; (setq magit-delta-default-dark-theme "Solarized (dark)") ;; "base16", "ansi-dark"
      (setq magit-delta-hide-plus-minus-markers nil)
      (magit-delta-mode))


 (use-package git-timemachine
      :ensure t)
  #+end_src
* faces
  #+begin_src emacs-lisp
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(avy-lead-face ((t (:foreground "red"))))
     '(avy-lead-face-0 ((t (:foreground "orange"))))
     '(avy-lead-face-1 ((t (:foreground "yellow"))))
     '(avy-lead-face-2 ((t (:foreground "white"))))
     '(company-echo-common ((t (:inherit company-echo :foreground "gray15"))))
     '(company-preview ((t (:foreground "gray15"))))
     '(company-preview-common ((t (:foreground "tomato2"))))
     '(company-tooltip ((t (:background "gray12" :foreground "gray85"))))
     '(company-tooltip-annotation ((t (:foreground "gray15"))))
     '(company-tooltip-common ((t (:foreground "firebrick4"))))
     '(company-tooltip-selection ((t (:background "gray23" :foreground "white"))))
     '(diff-refine-added ((t (:background "green" :foreground "#336633"))))
     '(diff-removed ((t (:background "red" :foreground "#663333"))))
     '(dired-subtree-depth-1-face ((t (:background "#252e30" :extend t))))
     '(dired-subtree-depth-2-face ((t (:background "#232a2b" :extend t))))
     '(dired-subtree-depth-3-face ((t (:background "#212627" :extend t))))
     '(dired-subtree-depth-4-face ((t (:background "#1e2223" :extend t))))
     '(dired-subtree-depth-5-face ((t (:background "#1c1d1e" :extend t))))
     '(dired-subtree-depth-6-face ((t (:background "#1a191a" :extend t))))
     '(ediff-current-diff-C ((t (:background "#444417"))))
     '(ediff-even-diff-C ((t (:background "#555555"))))
     '(ediff-fine-diff-A ((t (:background "#751717"))))
     '(ediff-fine-diff-B ((t (:background "#176517"))))
     '(ediff-fine-diff-C ((t (:background "#555520"))))
     '(ediff-odd-diff-C ((t (:background "#555555"))))
     '(fill-column-indicator ((t (:foreground "gray13"))))
     '(fill-column-indicator-face ((t (:foreground "gray20"))))
     '(header-line ((t (:inherit org-table-face :foreground "#8abeb7"))))
     '(lispy-face-hint ((t (:background "gray20" :foreground "#fff3bc"))))
     '(magit-diff-added ((t (:background "#273C26" :foreground "#ddffdd"))))
     '(magit-diff-added-highlight ((t (:background "#223822" :foreground "#cceecc"))))
     '(magit-diff-removed ((t (:background "#442222" :foreground "#ffdddd"))))
     '(magit-diff-removed-highlight ((t (:background "#442222" :foreground "#eecccc"))))
     '(magit-diffstat-removed ((t (:foreground "#aa4444"))))
     '(org-block ((t (:foreground "gray75"))))
     '(org-level-1 ((t (:foreground "#de935f"))))
     '(org-level-2 ((t (:foreground "burlywood"))))
     '(org-meta-line ((t (:height 0.8 :foreground "gray50"))))
     '(org-tag ((t (:foreground "dimgray"))))
     '(outline-1 ((t (:foreground "#de935f"))))
     '(outline-2 ((t (:foreground "burlywood"))))
     '(show-paren-match ((t (:background "black" :foreground "yellow" :weight ultra-bold :width ultraexpanded)))))
  #+end_src
* plantuml
  #+begin_src emacs-lisp
    (use-package plantuml-mode
      :ensure t)

    (use-package flycheck-plantuml
      :ensure t)
  #+end_src
* asciidoc
  #+begin_src emacs-lisp
    (use-package adoc-mode
      :ensure t
      :init (add-to-list 'auto-mode-alist (cons "\\.adoc\\'" 'adoc-mode)))
  #+end_src
* org
  #+begin_src emacs-lisp
    (use-package org
      :ensure t
      :config
      (cond
       ((eq gb/theme-mode 'light) nil) ;; TODO complete
       (t (progn
            (--each '( (header-line ((t (:inherit org-table-face :foreground "#8abeb7"))))
                       (org-tag ((t (:foreground "dimgray")))))
              (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it)))))) ;; set (non scrolling) header to inhiert font from org mode tables (not mode line, which is to small on multi monitor w/ current config)

      (when (fboundp #'adoc-mode)
        (use-package ox-asciidoc
          :ensure t))

      (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
      (setq org-hide-emphasis-markers t)          ;; hides ** and // surrounding text that is bold or intalics
      (setq org-src-window-setup 'current-window) ;; make edit src block open in the same window as the org file itself

      (setq org-image-actual-width nil) ;; redisplay images after org babel execute
      (setq org-startup-folded t) ;; "ensure opened org files are opened in overview (folded)"
      (setq org-catch-invisible-edits t)
      (setq org-cycle-include-plain-lists 'integrate)

      (setq org-highlight-latex-and-related nil) ;; '(native)

      (cond
       ((eq gb/theme-mode 'light) nil) ;; TODO complete
       (t (progn
            (--each '( (org-block ((t (:foreground "gray75")))))
              (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it))))))

      (org-clock-persistence-insinuate)

      ;; make sure that clock display will include all times (even last year ...)
      (setq org-clock-display-default-range (quote untilnow))

      ;; Yes it's long... but more is better ;
      (setq org-clock-history-length 35)

      ;; Resume clocking task on clock-in if the clock is open
      (setq org-clock-in-resume t)

      ;; name the drawer to be "clocking"
      (setq org-clock-into-drawer "CLOCKING")

      ;; The format string used when creating CLOCKSUM lines.
      (setq org-duration-format '((special . h:mm)))
      (setq org-time-clocksum-format
            (quote
             (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))) ;; make sure that clock sums in org mode show hours and minutes only (no days)

      ;; Change task state to IMPLEMENT when clocking in (only if in STATE TODO)
      (setq org-clock-in-switch-to-state (function  gb/org-clock-in-switch-to-state-fn))

      (setq org-ellipsis "…")         ;; make the ... at the end (that indicates folding) be a bit less invasive
      (setq org-hide-leading-stars t) ;; each level only one star
      (setq org-special-ctrl-a/e t)   ;; jump to the head text only (not to the star marking the head)
      (cond
       ((eq gb/theme-mode 'light) nil) ;; TODO complete
       (t (progn
            (--each '((org-meta-line ((t (:height 0.8 :foreground "gray50")))))
              (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it))))))

      (custom-theme-set-faces 'user
                              ;; `(org-document-title ((t ( :height 1.5 :underline nil))))
                              ;; `(org-level-8 ((t (,@headline ,@variable-tuple))))
                              ;; `(org-level-7 ((t (,@headline ,@variable-tuple))))
                              ;; `(org-level-6 ((t (,@headline ,@variable-tuple))))
                              ;; `(org-level-5 ((t (,@headline ,@variable-tuple))))
                              ;; `(org-level-4 ((t (:foreground "#a97167"))))
                              ;; `(org-level-3 ((t (:foreground "#4fa8a8" ,@headline))))
                              '(org-headline-done ((t (:strike-through nil))))
                              `(org-level-2 ((t (:foreground "burlywood"))))
                              `(outline-2 ((t (:foreground "burlywood")))) ;; change both org-level and outline, since org-tree-slide uses them
                              `(org-level-1 ((t (:foreground "#de935f"))))
                              `(outline-1 ((t (:foreground "#de935f")))))

      ;; make sure that a todo cannot switch to done, if one of its descendants is not done yet
      (setq org-enforce-todo-dependencies t)
      ;; make sure that todo cannot switch to done if a checkbox within its descendants is not checked!
      (setq org-enforce-todo-checkbox-dependencies t)

      ;; customize todo lists
      (setq org-todo-keywords
            '((sequence "TODO"               ;; currently to do task
                        "IMPLEMENT(i)"       ;; currently implementing this to do
                        "TEST(t@)"           ;; currently testing this to do
                        "ACCEPT(a@)"         ;; accepted by tester
                        "PLANNED"            ;; planned as future task
                        "|"                  ;; separates todo from done state
                        "OBSOLETE(o)"        ;; now obosolete
                        "CARRY OVER(c)"      ;; carried over to new to do
                        "BRAIN(b!)"          ;; done and keep information as part of your brain
                        "DONE(d!)"           ;; finally done
                        )))
      (setq org-todo-keyword-faces
            '(("PLANNED" . "lightblue")
              ("TODO" . "red3")
              ("IMPLEMENT" . "orange")
              ("TEST" . "yellow")
              ("ACCEPT" . (:foreground "gray" :weight bold))
              ("OBSOLETE" . "darkgreen")
              ("CARRY OVER" . "brown")
              ("BRAIN". (:foreground "green3" :weight bold))
              ("DONE" . "green3")))


      (defun gb/org-confirm-babel-evaluate (lang body)
        "allow autoexecution of babel blocks"
        (not (or (string= lang "plantuml")
                 ;; ... add more above this line when needed ...
                 )))
      (setq org-confirm-babel-evaluate 'gb/org-confirm-babel-evaluate)
      (add-hook 'org-babel-after-execute-hook #'org-redisplay-inline-images) ;; redisplay images after babel execution

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (plantuml . t)
         (shell . t))))

    (use-package org-bullets
      :ensure t
      :after ( org)
      :init
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      :config
      (setq org-bullets-bullet-list '("●" "⚬" "∘" "◦" "∙" "◉" "◯" "◎" "○" "◌" "◎" "○" "☉" "￮" "⊙" "❍" "⊚" "⊛")))
  #+end_src
* gpg and pinentry
  #+begin_src emacs-lisp
    ;; ================================================================================ gpg and pinentry
    ;; and put this line into ~/.gnupg/gpg-agent.conf: allow-loopback-entry
    (setq epa-pinentry-mode 'loopback)

    (use-package hidepw
      :load-path "~/.emacs.d/additionals"
      :custom ((hidepw-patterns '(" *:[^:]*PASS[^:]*: \\(.*\\)")))
      :config (add-hook 'org-mode-hook #'hidepw-mode))


    (use-package org-password-manager
      :ensure t
      :bind (:map org-mode-map
                  ("C-c s b" . gb/browse-to-link-property)
                  ("C-c s u" . org-password-manager-get-username)
                  ("C-c s p" . org-password-manager-get-password)
                  ("C-c s g" . org-password-manager-generate-password))
      :after ( org)
      :config
      (defun gb/browse-to-link-property ()
        "get the property ':LINK:' from the entry at point and browse to url given as value"
        (interactive)
        (browse-url (org-entry-get (point) "LINK" t))))


  #+end_src
* parenthesis
  #+begin_src emacs-lisp
    (show-paren-mode 1)

    (cond
     ((eq gb/theme-mode 'light) nil) ;; TODO complete
     (t (progn
          (--each '((show-paren-match
                     ((t (:background "black"
                                      :foreground "yellow"
                                      :weight ultra-bold
                                      :width ultraexpanded)))))
            (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it))))))

  #+end_src
* whitespace
  #+begin_src emacs-lisp
    (use-package ws-butler
      :ensure t
      :diminish
      :config (ws-butler-global-mode 1))
  #+end_src
* encoding
  #+begin_src emacs-lisp
    (prefer-coding-system 'utf-8-unix)
    (set-default-coding-systems 'utf-8-unix)
    (set-terminal-coding-system 'utf-8-unix)
    (set-keyboard-coding-system 'utf-8-unix)
    (set-selection-coding-system 'utf-8-unix)
    (setq-default buffer-file-coding-system 'utf-8-unix)
  #+end_src
* general settings
  #+begin_src emacs-lisp
    ;; ================================================================================ general settings
    (global-hl-line-mode 1)

    (setq electric-indent-mode nil)
    (setq-default indent-tabs-mode nil)
    ;; display tabs as four spaces
    (setq default-tab-width 4)
    (setq tab-width 4)

    (setq tab-always-indent 'complete)
    (add-to-list 'completion-styles 'initials t)

    (setq auto-save-default nil)
    (setq auto-save-interval 500)

    ;; make sure that C-k kills to the end of line and the whole line if cursor is at the start of the line
    (setq-default kill-whole-line t)

    ;; automatically reload open buffers if they changed on disk
    (global-auto-revert-mode 1)
    (set-default 'auto-revert-avoid-polling t) ;; avoid polling (may not work on remote filesystems)

    ;; make sure so long is used for e.g. minified files
    ;; see https://www.emacswiki.org/emacs/SoLong
    (when (version<= "27" emacs-version)
      (setq so-long-threshold 1024) ;; if line is longer than 1024, the enter so long mode
      (global-so-long-mode 1))

    ;; overwrite selected text
    (delete-selection-mode t)

    (setq create-lockfiles nil)

    (bind-key "M-j" #'join-line)

    (require 'dabbrev)
    (setq dabbrev-case-distinction nil)
    (setq dabbrev-case-replace nil)

    ;; Customizations relating to editing a buffer.
    ;; enable C-x C-u to do upcase on region (which is disabled by default)
    (put 'upcase-region 'disabled nil)
    (put 'downcase-region 'disabled nil)
  #+end_src
* toggle
  #+begin_src emacs-lisp
    (defun gb/toggle-line-numbers ()
      "toggle display of line numbers"
      (interactive)
      (setq display-line-numbers (not display-line-numbers)))

    (define-prefix-command 'gb/toggle-map)
    (define-key ctl-x-map "t" 'gb/toggle-map)

    (define-key gb/toggle-map "c" #'column-number-mode)
    (define-key gb/toggle-map "d" #'toggle-debug-on-error)
    (define-key gb/toggle-map "e" #'toggle-debug-on-error)
    (define-key gb/toggle-map "f" #'auto-fill-mode)
    (define-key gb/toggle-map "k" #'flycheck-mode)
    (define-key gb/toggle-map "l" #'toggle-truncate-lines)
    (define-key gb/toggle-map "n" #'gb/toggle-line-numbers)
    (define-key gb/toggle-map "o" #'dired-omit-mode)
    (define-key gb/toggle-map "q" #'toggle-debug-on-quit)
    (define-key gb/toggle-map "r" #'toggle-word-wrap)
    (define-key gb/toggle-map "s" #'flyspell-mode)
    (define-key gb/toggle-map "w" #'whitespace-mode)
    (define-key gb/toggle-map "5" #'toggle-frame-fullscreen)

    (define-key gb/toggle-map "a" #'dired-du--toggle-human-readable)
  #+end_src
* undo / kill ring
  #+begin_src emacs-lisp
    (use-package browse-kill-ring
      ;; bind M-y to interactively browsing the kill ring buffer
      :ensure t
      :config (browse-kill-ring-default-keybindings))

    (use-package undo-tree
      :ensure t
      :diminish
      :custom ((undo-tree-auto-save-history nil)
               (undo-tree-visualizer-diff t))
      :config (global-undo-tree-mode))

  #+end_src
* rainbow
  #+begin_src emacs-lisp
    (use-package rainbow-mode
      :ensure t
      :diminish
      :init (add-hook 'help-mode-hook #'rainbow-mode))
    ;; can be switched off by M-x rainbow-identifiers-mode, which toggles the mode
    (use-package rainbow-identifiers
      :ensure t
      :diminish
      :init
      (add-hook 'prog-mode-hook 'rainbow-identifiers-mode))
    (use-package rainbow-delimiters
      :ensure t
      :diminish
      :init
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  #+end_src
* which key
  #+begin_src emacs-lisp
    (use-package which-key
      :ensure t
      :diminish
      :config
      (progn
        (bind-key "C-h y" #'which-key-show-top-level)
        (setq which-key-idle-secondary-delay 0.05)
        (which-key-mode)
        (which-key-setup-side-window-right)
        (validate-setq which-key-side-window-max-width 0.4)
        (setq which-key-max-description-length 45)
        (setq which-key-popup-type 'side-window)))

  #+end_src
* company
  #+begin_src emacs-lisp
    (use-package company
      ;; :after (selected)
      :ensure t
      :diminish
      :init (progn
              (add-hook 'after-init-hook 'global-company-mode))
      :config
      (progn
        (setq company-idle-delay nil)
        (setq company-show-numbers nil)
        ;; use numbers 0-9 to select company completion candidates
        (let ((map company-active-map))
          (mapc (lambda (x) (define-key map (format "%d" x)
                              `(lambda () (interactive) (company-complete-number ,x))))
                (number-sequence 0 9)))

        ;; this will make company be used tab completion (if no indenting needs to take place)
        (global-set-key (kbd "TAB") #'company-indent-or-complete-common)
        (setq company-minimum-prefix-length 4)
        (setq company-tooltip-limit 15)
        (setq company-tooltip-flip-when-above t)
        (setq company-dabbrev-downcase nil) ;; make company suggestions case sensitive (no downcase conversion)
        (setq company-backends
              (quote
               (company-capf company-shell company-bbdb company-semantic company-files
                             company-dabbrev-code company-gtags company-etags company-keywords
                             company-oddmuse company-dabbrev)))
        (setq company-dabbrev-code-modes
              (quote
               (prog-mode
                batch-file-mode
                css-mode
                ;; erlang-mode
                ;; haskell-mode
                ;; jde-mode
                ;; lua-mode
                ;; python-mode
                clojure-mode
                ;; scala-mode
                )))

        (cond
         ((eq gb/theme-mode 'light) nil) ;; TODO complete
         (t (progn
              (message "customize faces - company")
              (--each '((company-echo-common ((t (:inherit company-echo :foreground "gray15"))))
                        (company-preview ((t (:foreground "gray15"))))
                        (company-preview-common ((t (:foreground "tomato2"))))
                        (company-tooltip ((t (:background "gray12" :foreground "gray85"))))
                        (company-tooltip-selection ((t (:background "gray23" :foreground "white"))))
                        (company-tooltip-common ((t (:foreground "firebrick4"))))
                        (company-tooltip-annotation ((t (:foreground "gray15")))))
                (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it))))))))
  #+end_src
* company-box
  #+begin_src emacs-lisp
    (when gb--extended-profile
      (use-package company-box
        :ensure t
        :after (company)
        :diminish
        :hook (company-mode . company-box-mode)
        :config
        (progn
          (defun gb/company-box-doc--init-frame-parameter (orig-func &rest args)
            "initialize frame parameter to ensure that the frame is always recreated"
            (company-box-doc--hide (selected-frame))
            (frame-local-setq company-box-doc-frame nil)
            ;; (set-frame-parameter nil 'company-box-doc-frame nil) ;; necessary for old company-box version < company-box-20200909.714
            )
          (advice-add 'company-box-doc--show :before #'gb/company-box-doc--init-frame-parameter)
          ;; (advice-remove 'company-box-doc--show #'gb/company-box-doc--init-frame-parameter)
          (setq company-box-enable-icon t)
          (cond
           ((eq gb/theme-mode 'light) nil) ;; TODO complete
           (t (progn
                (--each '((company-box-background ((t (:foreground "grey80" :background "gray12"))))
                          (company-box-scrollbar ((t (:inherit company-tooltip-selection :background "grey30"))))
                          (company-box-candidate ((t (:foreground "gray85")))))
                  (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it)))))))))
  #+end_src
* umlaute
  #+begin_src emacs-lisp
    (progn
      (require 'bind-key)
      ;; (require 'key-chord)
      (bind-key "C-\" a" (lambda () (interactive) (insert "ä")))
      (bind-key "C-\' a" (lambda () (interactive) (insert "ä")))
      (bind-key "C-\" A" (lambda () (interactive) (insert "Ä")))
      (bind-key "C-\' A" (lambda () (interactive) (insert "Ä")))
      ;;(key-chord-define-global "AE" (lambda () (interactive) (insert "Ä")))
      ;;(key-chord-define-global "ae" (lambda () (interactive) (insert "ä")))
      (bind-key "C-\" u" (lambda () (interactive) (insert "ü")))
      (bind-key "C-\' u" (lambda () (interactive) (insert "ü")))
      (bind-key "C-\" U" (lambda () (interactive) (insert "Ü")))
      (bind-key "C-\' U" (lambda () (interactive) (insert "Ü")))
      ;;(key-chord-define-global "UE" (lambda () (interactive) (insert "Ü")))
      ;;(key-chord-define-global "ue" (lambda () (interactive) (insert "ü")))
      (bind-key "C-\" o" (lambda () (interactive) (insert "ö")))
      (bind-key "C-\' o" (lambda () (interactive) (insert "ö")))
      (bind-key "C-\" O" (lambda () (interactive) (insert "Ö")))
      (bind-key "C-\' O" (lambda () (interactive) (insert "Ö")))
      ;;(key-chord-define-global "OE" (lambda () (interactive) (insert "Ö")))
      ;; (key-chord-define-global "oe" (lambda () (interactive) (insert "ö")))
      (bind-key "C-\" s" (lambda () (interactive) (insert "ß")))
      (bind-key "C-\' s" (lambda () (interactive) (insert "ß")))
      (bind-key "C-\" S" (lambda () (interactive) (insert "ß")))
      (bind-key "C-\' S" (lambda () (interactive) (insert "ß"))))

  #+end_src
* hydra
  #+begin_src emacs-lisp
    ;; ================================================================================ hydra
    (use-package hydra
      :ensure t
      :bind (
             ( "<f1>" . hydra-allhydras/body) ;; globally defined, can be locally redefined
             ( "<M-f1>" . hydra-allhydras/body) ;; always jump to the global hydra
             ;; make buffer specific f1 bindings
             ;; :map org-agenda-mode-map
             ;; ( "<f1>" . hydra-org-agenda-view/body )
             )
      :config

      ;;--------------------------------------------------------------------------------
      ;; (when (package-installed-p 'org)
      ;;   (defun org-agenda-cts ()
      ;;     (ignore-errors
      ;;       (let* ((args (get-text-property
      ;;                     (min (1- (point-max)) (point))
      ;;                     'org-last-args)))

      ;;         (nth 2 args))))

      ;;   ;; currently not functional (probably because of hydra update)
      ;;   (defhydra hydra-org-agenda-view ()
      ;;     "
      ;;         org agenda view
      ;;         ------------------------------------------------------
      ;;         _d_: ?d? day        _g_: time grid=?g? _a_: arch-trees
      ;;         _w_: ?w? week       _[_: inactive      _A_: arch-files
      ;;         _t_: ?t? fortnight  _f_: follow=?f?    _r_: report=?r?
      ;;         _m_: ?m? month      _e_: entry =?e?    _D_: diary=?D?
      ;;         _y_: ?y? year       _q_: quit          _L__l__c_: ?l?

      ;;       %s(hydra-combine-functions-w-key-bindings
      ;;         '((\"  [d]   day      \" . org-agenda-day-view)
      ;;           (\"  [w]   week     \" . org-agenda-week-view)
      ;;           (\"  [t]   fortnight\" . org-agenda-fortnight-view)
      ;;           (\"  [m]   month    \" . org-agenda-month-view)
      ;;           (\"  [y]   year     \" . org-agenda-year-view)
      ;;           (\"  [lLc] log mode \" . org-agenda-log-mode)
      ;;           (\"  [f]   follow   \" . org-agenda-follow-mode)
      ;;           (\"  [aA]  archive  \" . org-agenda-archives-mode)
      ;;           (\"  [r]   report   \" . org-agenda-clockreport-mode)
      ;;           (\"  [e]   entry    \" . org-agenda-entry-text-mode)
      ;;           (\"  [g]   grid     \" . org-agenda-toggle-time-grid)
      ;;           (\"  [D]   diary    \" . org-agenda-toggle-diary)
      ;;           ))
      ;;       "
      ;;     ("SPC" org-agenda-reset-view)
      ;;     ("d" org-agenda-day-view
      ;;      (if (eq 'day (org-agenda-cts))
      ;;          "[x]" "[ ]"))
      ;;     ("w" org-agenda-week-view
      ;;      (if (eq 'week (org-agenda-cts))
      ;;          "[x]" "[ ]"))
      ;;     ("t" org-agenda-fortnight-view
      ;;      (if (eq 'fortnight (org-agenda-cts))
      ;;          "[x]" "[ ]"))
      ;;     ("m" org-agenda-month-view
      ;;      (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
      ;;     ("y" org-agenda-year-view
      ;;      (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
      ;;     ("l" org-agenda-log-mode
      ;;      (format "% -3S" org-agenda-show-log))
      ;;     ("L" (org-agenda-log-mode '(4)))
      ;;     ("c" (org-agenda-log-mode 'clockcheck))
      ;;     ("f" org-agenda-follow-mode
      ;;      (format "% -3S" org-agenda-follow-mode))
      ;;     ("a" org-agenda-archives-mode)
      ;;     ("A" (org-agenda-archives-mode 'files))
      ;;     ("r" org-agenda-clockreport-mode
      ;;      (format "% -3S" org-agenda-clockreport-mode))
      ;;     ("e" org-agenda-entry-text-mode
      ;;      (format "% -3S" org-agenda-entry-text-mode))
      ;;     ("g" org-agenda-toggle-time-grid
      ;;      (format "% -3S" org-agenda-use-time-grid))
      ;;     ("D" org-agenda-toggle-diary
      ;;      (format "% -3S" org-agenda-include-diary))
      ;;     ("!" org-agenda-toggle-deadlines)
      ;;     ("["
      ;;      (let ((org-agenda-include-inactive-timestamps t))
      ;;        (org-agenda-check-type t 'timeline 'agenda)
      ;;        (org-agenda-redo)))
      ;;     ("q" (message "Abort") :exit t)))

      ;;--------------------------------------------------------------------------------
      (defhydra hydra-profiler ()
        "
              profiler
              ^-^-------------------^-^-----------------
              _s_: start profiler   _r_: profiler report
              _e_: end profiler
            "
        ("s" profiler-start :exit t)
        ("e" profiler-stop :exit t)
        ("r" profiler-report :exit t))

      ;;--------------------------------------------------------------------------------
      (when (eq gb/completion-framework 'helm)
        (when (package-installed-p 'dash)
          (defhydra hydra-dash ()
            "
               dash
               ^-^---------------------^-^--------------------------
               _h_ helm dash at point  _d_ dash at point
               ^ ^                     _D_ dash at point with docset

              %s(hydra-combine-functions-w-key-bindings
                '((\"  [h] helm dash at point     \" . helm-dash-at-point)
                  (\"  [d] dash at point          \" . dash-at-point)
                  (\"  [D] dash at point w/ docset\" . dash-at-point-with-docset)))
            "
            ("h" helm-dash-at-point :exit t)
            ("d" dash-at-point :exit t)
            ("D" dash-at-point-with-docset :exit t)
            )))

      ;;--------------------------------------------------------------------------------
      (when (package-installed-p 'avy-zap)
        (defhydra hydra-avy ()
          "
              avy
              ^-^-------------------^-^-----------------
              _z_: zap up to char        _c_: jump to word
              _Z_: zap to including char _l_: jump to line
              ^ ^                        _i_: jump to char within line

              %s(hydra-combine-functions-w-key-bindings
                '((\"  [z] zap up to char       \" . avy-zap-up-to-char)
                  (\"  [Z] zap to including char\" . avy-zap-to-char-dwim)
                  (\"  [c] jump to word         \" . avy-goto-word-1)
                  (\"  [l] jump to line         \" . avy-goto-line)
                  (\"  [i] jump to char w/i line\" . avy-goto-char-in-line)))
            "
          ("c" avy-goto-word-1 :exit t)
          ("z" avy-zap-to-char :exit t)
          ("Z" avy-zap-to-char-dwim :exit t)
          ("l" avy-goto-line :exit t)
          ("i" avy-goto-char-in-line :exit t)))

      (defhydra hydra-ui-info ()
        "
             ui-info
             -----------------------------
             _=_: what cursor position (C-u for font information)

             %s(hydra-combine-functions-w-key-bindings
                '((\" [=] what cursor position \" . what-cursor-position))))

           "
        ("=" what-cursor-position :exit t))

      ;;--------------------------------------------------------------------------------
      ;; TODO: install only those hydras that are actually defined
      (defhydra hydra-allhydras ()
        "
              list of all hydras
              ^--^------------------------^-^---------------
              _cr_: clojure refactoring   _m_ : multi cursor
              _n_ : navigate              _gm_: gnus mime
              _oa_: org agenda view       _gs_: gnus summary
              _om_: org mode              _gg_: gnus group
              _pp_: emacs profiler        _a_ : avy
              _i_ : ivy                   _d_ : dash
              _u_ : ui info
              ^ ^                         _q_ : quit
            "
        ("a" hydra-avy/body :exit t)
        ("cr" hydra-all-clojure-refactorings/body :exit t)
        ("m" hydra-multiple-cursors/body :exit t)
        ("n"  hydra-navigate-history/body :exit t)
        ("gs"  hydra-gnus-summary/body :exit t)
        ("gm" hydra-gnus-article-mime-part/body :exit t)
        ("gg" hydra-gnus-group/body :exit t)
        ("oa" hydra-org-agenda-view/body :exit t)
        ("om" hydra-org-mode/body :exit t)
        ("pp" hydra-profiler/body :exit t)
        ("i" hydra-ivy/body :exit t)
        ("d" hydra-dash/body :exit t)
        ("u" hydra-ui-info/body :exit t)
        ("q" (message "Abort") :exit t))

      )

  #+end_src
* cursor color
  #+begin_src emacs-lisp
    (when (file-exists-p "~/.emacs.d/additionals/cursor-chg.el")
      (use-package cursor-chg
        :load-path "~/.emacs.d/additionals/"
        :config
        (change-cursor-mode 1) ; On for overwrite/read-only/input mode
        ;; (toggle-cursor-type-when-idle 1) ; On when idle
        ))
  #+end_src
* multiple cursors (ext)
  #+begin_src emacs-lisp
    (when gb--extended-profile
      (use-package multiple-cursors
        :after ( hydra )
        :ensure t
        ;; bind currently does not work since some other project loads multiple cursors without req-package actually loading this!
        :bind (
               ;; When you have an active region that spans multiple lines, the following will
               ;; add a cursor to each line:
               ("C-S-c C-S-c" . mc/edit-lines)

               ;; When you want to add multiple cursors not based on continuous lines, but based on
               ;; keywords in the buffer, use:

               ("C->" . mc/mark-next-like-this)
               ("C-<" . mc/mark-previous-like-this)
               ("C-c C-<" . mc/mark-all-like-this) ;; mark textually (even substrings)
               ("C-c C->" . mc/mark-all-symbols-like-this) ;; mark more semantically (no substrings)
               )
        :config
        (progn
          (multiple-cursors-mode)
          (defhydra hydra-multiple-cursors ()
            "
                       ^Up^            ^Down^          ^Other^
                       ----------------------------------------------
                       [_p_]   Next    [_n_]   Next    [_l_] Edit lines
                       [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
                       [_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
                       ^ ^             ^ ^             [_m_] Mark by avy
                       ^ ^             ^ ^             [_q_] Quit
                   %s(hydra-combine-functions-w-key-bindings
                     '((\"    [p]   Up-Next       \" . mc/mark-previous-like-this)
                       (\"    [P]   Up-Skip       \" . mc/skip-to-previous-like-this)
                       (\"    [M-p] Up-Unmark     \" . mc/unmark-previous-like-this)
                       (\"    [n]   Down-Next     \" . mc/mark-next-like-this)
                       (\"    [N]   Down-Skip     \" . mc/skip-to-next-like-this)
                       (\"    [M-n] Down-Unmark   \" . mc/unmark-next-like-this)
                       (\"    [l]   Edit lines    \" . mc/edit-lines)
                       (\"    [a]   Mark all      \" . mc/mark-all-like-this)
                       (\"    [r]   Mark by regexp\" . mc/mark-all-in-region-regexp)
                       (\"    [m]   Mark by avy   \" . ace-mc-add-multiple-cursors)))
                       "
            ("l" mc/edit-lines :exit t)
            ("a" mc/mark-all-like-this :exit t)
            ("n" mc/mark-next-like-this)
            ("N" mc/skip-to-next-like-this)
            ("M-n" mc/unmark-next-like-this)
            ("p" mc/mark-previous-like-this)
            ("P" mc/skip-to-previous-like-this)
            ("M-p" mc/unmark-previous-like-this)
            ("r" mc/mark-all-in-region-regexp :exit t)
            ("m" ace-mc-add-multiple-cursors :exit t)
            ("q" (message "Abort") :exit t)))))

  #+end_src
* plant uml (ext)
  #+begin_src emacs-lisp
    (when gb--extended-profile
      (use-package plantuml-mode
        :ensure t
        :after ( org)
        :mode ("\\.\\(puml\\|plantuml\\)\\'" . plantuml-mode)
        :config
        ;; (autoload 'plantuml-mode "plantuml-mode" nil t)
        (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
        ;; (add-to-list 'auto-mode-alist '("\\.puml$" . plantuml-mode))
        ;;(add-to-list 'auto-mode-alist '("\\.plantuml$" . plantuml-mode))


        ;; set default header args for plantuml
        (setq org-babel-default-header-args:PlantUML
              '((:results . "file") (:exports . "results") (:noweb . "yes") (:cmdline . "-charset UTF-8")))))

  #+end_src
* shell / term
  #+begin_src emacs-lisp
    (use-package native-complete
      :load-path "~/repo/emacs-native-shell-complete"
      :bind (:map shell-mode-map
                  ("M-/" . company-native-complete))
      :config (when nil (native-complete-setup-bash))
      :init (use-package company-native-complete
              :load-path "~/repo/emacs-native-shell-complete"))

    (use-package coterm
      :ensure t
      :config (coterm-mode 1))

    (use-package shell-here
      ;; :after (eldoc-overlay)
      :ensure t
      :config
      (defun gb/install-proc-listener (&rest r)
        "install process listener to close window ofter exited or finished message"
        (message "advicing to exit buffer")
        (let ((process (get-buffer-process (current-buffer))))
          (when process
            (set-process-sentinel
             process
             (lambda (_proc change)
               (when (string-match-p "\\(?:finished\\|exited\\)" change)
                 (progn
                   (kill-buffer (current-buffer)))))))))
      (advice-add 'shell-here :after #'gb/install-proc-listener)
      :bind (("C-x C-h" . shell-here)
             :map dired-mode-map
             ("C-x C-h" . shell-here)))

    (use-package shell-pop
      :ensure t
      :init
      (defun gb/shell-pop-new ()
        (interactive)
        (let ((current-prefix-arg '(4))) ;; emulate C-u
          (call-interactively 'shell-pop)))
      :bind (("C-c C-h" . gb/shell-pop-new)
             :map dired-mode-map
             ("C-c C-h" . gb/shell-pop-new)))

  #+end_src
* dired
  #+begin_src emacs-lisp
    (setq gnu-ls-bin-path (car (split-string (shell-command-to-string "command -v ls"))))

    (use-package dired
      :bind (("C-x d" . dired)
             :map dired-mode-map
             ("C-c m" . gb/dired-open-media)
             ("C-p" . diredp-previous-line)
             ("`" . gb/dired-open-term)
             ("e" . gb/dired-ediff-files))
      :init
      (use-package dired-x)
      (add-hook 'dired-mode-hook 'auto-revert-mode)
      (add-hook 'dired-mode-hook 'dired-omit-mode)
      (defun gb/dired-open-media ()
        "open mount point for media in separate dired window"
        (interactive)
        (dired "/run/media/pe"))
      :config
      (setq dired-omit-size-limit 60000)
      (setq dired-dwim-target t) ;; try to guess the directory to use for dired
      (setq dired-listing-switches "-Alh --group-directories-first") ;; default switches for ls to be used for dired listing
      (setq diredp-hide-details-propagate-flag t) ;; opening subfolders inherit details flag (shown/hidden)
      (setq insert-directory-program gnu-ls-bin-path)
      (setq  dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\..*\\|^build$\\|^out$")
      (setq dired-guess-shell-alist-user '(
                                           ;; ("\\.webm\\'\\|\\.mkv\\'\\|\\.mpe?g\\'\\|\\.avi\\'\\|\\.mp4\\'\\|\\.flv\\'" "cvlc")
                                           ;; ("\\.sid\\'" "sidplayfp")
                                           ("\\.html?\\'" "firefox")
                                           ;; ("\\.docx?\\'\\|\\.xlsx?\\'\\|\\.pptx?\\'\\|\\.odt\\'" "soffice")
                                           ;; ("\\.eps\\'\\|\\.pdf\\'" "evince")
                                           ))

      (defun gb/dired-create-directory-with-marked-files (directory)
        "Create a directory called DIRECTORY and move all marked files into that directory (if any).
    Parent directories of DIRECTORY are created as needed.
    If DIRECTORY already exists, signal an error."
        (interactive
         (list (read-file-name "Create directory: " (dired-current-directory))))
        (let* ((expanded (directory-file-name (expand-file-name directory)))
               new)
          (if (file-exists-p expanded)
              (error "Cannot create directory %s: file exists" expanded))
          (setq new (dired--find-topmost-parent-dir expanded))
          (make-directory expanded t)
          (--each
              (dired-get-marked-files)
            (let ((name (file-name-nondirectory it)))
              (message (format "moving file %s to %s "  it (format "%s/%s" expanded name)))
              (rename-file it (format "%s/%s" expanded name))))
          (when new
            (dired-add-file new)
            (dired-move-to-filename))))

      ;; see https://oremacs.com/2016/02/24/dired-rsync/
      (defun gb/dired-rsync (dest)
        "copy marked files asynchronously with progress information in separate buffer"
        (interactive
         (list
          (expand-file-name
           (read-file-name
            "Rsync to:"
            (dired-dwim-target-directory)))))
        ;; store all selected files into "files" list
        (let ((files (dired-get-marked-files
                      nil current-prefix-arg))
              ;; the rsync command
              (tmtxt/rsync-command
               "rsync -arvz --progress "))
          ;; add all selected file names as arguments
          ;; to the rsync command
          (dolist (file files)
            (setq tmtxt/rsync-command
                  (concat tmtxt/rsync-command
                          (shell-quote-argument file)
                          " ")))
          ;; append the destination
          (setq tmtxt/rsync-command
                (concat tmtxt/rsync-command
                        (shell-quote-argument dest)))
          ;; run the async shell command
          (async-shell-command tmtxt/rsync-command "*rsync*")
          ;; finally, switch to that window
          (other-window 1)))

      ;; snippet from
      (defun gb/dired-open-term ()
        "Open an `ansi-term' that corresponds to current directory."
        (interactive)
        (let* ((current-dir (dired-current-directory))
               (current-file (dired-get-filename))
               (wanted-dir (if (file-directory-p current-file)
                               current-file
                             current-dir)))
          (if (file-remote-p wanted-dir)
              (term-send-string
               (gb/terminal wanted-dir)
               (when (file-remote-p wanted-dir)
                 (let ((tramp-file-name (tramp-dissect-file-name wanted-dir t)))
                   (format "ssh %s@%s\n"
                           (aref tramp-file-name 1) (aref tramp-file-name 2)))))
            (cd wanted-dir)
            (gb/terminal wanted-dir))))

      (defun gb/dired-open-file-from-here ()
        "Open an `ansi-term' that corresponds to current directory."
        (interactive)
        (let* ((current-dir (dired-current-directory))
               (current-file (dired-get-filename))
               (wanted-dir (if (file-directory-p current-file)
                               current-file
                             current-dir)))
          (unless (file-remote-p wanted-dir)
            (if (eq gb/completion-framework 'helm)
                (helm-find-files-1 wanted-dir)
              (find-file wanted-dir)))))

      (defun gb/terminal (&optional suffix)
        "Switch to terminal. Launch if nonexistent."
        (interactive)
        (let* ((buffer-name (generate-new-buffer-name (s-concat "*terminal" (or suffix "") "*"))))
          (shell buffer-name)))

      ;; snippet from https://oremacs.com/2017/03/18/dired-ediff/
      (defun gb/dired-ediff-files ()
        "ediff two marked files (no questions asked)"
        (interactive)
        (let ((files (dired-get-marked-files))
              (wnd (current-window-configuration)))
          (if (<= (length files) 2)
              (let ((file1 (car files))
                    (file2 (if (cdr files)
                               (cadr files)
                             (read-file-name
                              "file: "
                              (dired-dwim-target-directory)))))
                (if (file-newer-than-file-p file1 file2)
                    (ediff-files file2 file1)
                  (ediff-files file1 file2))
                (add-hook 'ediff-after-quit-hook-internal
                          (lambda ()
                            (setq ediff-after-quit-hook-internal nil)
                            (set-window-configuration wnd))))
            (error "no more than 2 files should be marked")))))

    (use-package dired-subtree
      :ensure t
      :demand t
      :commands (gb/dired-toggle-expanding-single-dirs dired-subtree-up dired-subtree-up)
      :bind (:map dired-mode-map
                  ("TAB" . gb/dired-toggle-expanding-single-dirs)
                  ("[" . dired-subtree-up)
                  ("C-c C-u" . dired-subtree-up))
      :config
      (cond
       ((eq gb/theme-mode 'light) nil) ;; TODO complete
       (t (progn
            (--each '((dired-subtree-depth-1-face ((t (:background "#252e30" :extend t))))
                      (dired-subtree-depth-2-face ((t (:background "#232a2b" :extend t))))
                      (dired-subtree-depth-3-face ((t (:background "#212627" :extend t))))
                      (dired-subtree-depth-4-face ((t (:background "#1e2223" :extend t))))
                      (dired-subtree-depth-5-face ((t (:background "#1c1d1e" :extend t))))
                      (dired-subtree-depth-6-face ((t (:background "#1a191a" :extend t)))))
              (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it)))))))

    (defun gb/dired--get-depth-at-point ()
      "get the level (staring with 1) of the subdirectory at point (else nil)"
      (when (or (dired-subtree--dired-line-is-directory-or-link-p) t)
        (let* ((beg (point))
               (self (dired-subtree--get-ov beg)))
          (or (and self (1+ (overlay-get self 'dired-subtree-depth)))
              1))))

    (defun gb/dired-toggle-expanding-single-dirs ()
      "toggle subdir folding, expanding subdirectories with single folders recursively"
      (interactive)
      (save-excursion
        (when (dired-subtree--dired-line-is-directory-or-link-p)
          (dired-subtree-toggle)
          (when (dired-subtree--is-expanded-p)
            (let* ((depth (gb/dired--get-depth-at-point)))
              (forward-line)
              (when (dired-subtree--dired-line-is-directory-or-link-p)
                (let* ((c-depth (gb/dired--get-depth-at-point)))
                  (when (and (dired-subtree--dired-line-is-directory-or-link-p)
                             (= c-depth (1+ depth)))
                    (forward-line)
                    (let* ((s-depth (gb/dired--get-depth-at-point)))
                      (forward-line -1)
                      (when (< (or s-depth 1) c-depth)
                        (gb/dired-toggle-expanding-single-dirs)))))))))
        (when (fboundp 'dired-sidebar-redisplay-icons)
          (dired-sidebar-redisplay-icons))))

    (use-package vscode-icon
      :ensure t
      :config)
    (use-package dired-sidebar
      :ensure t
      :bind (( "s-A" . dired-sidebar-toggle-sidebar)
             ( "s-a" . gb/dired-sidebar-follow-file)
             :map dired-sidebar-mode-map
             ( "c-s" . nonincremental-search-forward)
             ( "C-x C-d" . gb/dired-open-file-from-here)
             ( "C-x d" . gb/dired-open-file-from-here)
             ( "C-x C-f" . counsel-find-file)
             ( "<tab>" . gb/dired-toggle-expanding-single-dirs)
             ( "+" . dired-create-directory))
      ;; :after (dired all-the-icons vscode-icon)
      :config
      ;; make sure that long lines are truncated in sidebar
      (defun gb/dired-keep-cursor-during-tui-update (orig-fun &rest args)
        "execute dired omit expunge after dired sidebar tui update"
        (let ((old-point (point)))
          (apply orig-fun args)
          (dired-omit-expunge)
          (goto-char old-point)
          (global-hl-line-highlight)))

      (advice-add 'dired-sidebar-revert :around #'gb/dired-keep-cursor-during-tui-update)

      ;; (advice-add 'dired-sidebar-revert :after #'(lambda (&rest args) (message "TRACE: dired-sidebar-revert")))
      ;; (advice-remove 'dired-sidebar-tui-update #'gb/dired-keep-cursor-during-tui-update)


      (advice-add 'dired-sidebar-toggle-sidebar :before
                  #'(lambda (&rest args) (setq dired-sidebar-width (min 70 (/ (* 60 (frame-width)) (/ 1920 (default-font-width)))))))

      (advice-add 'dired-sidebar-toggle-sidebar :after
                  #'(lambda (&rest args)
                      (when (and (dired-sidebar-showing-sidebar-p)
                               (eq (current-buffer) (dired-sidebar-buffer)))
                        (toggle-truncate-lines '(1))
                        (setq line-spacing 0))))

      (defun gb/dired-sidebar-follow-file ()
        "ensure sidebar is open and position cursor on file from which this function was called"
        (interactive)
        (if (and (dired-sidebar-showing-sidebar-p)
                 (string= (buffer-name) (buffer-name (dired-sidebar-buffer))))
            (dired-sidebar-hide-sidebar)
          (if (buffer-file-name)
              (unless (dired-sidebar-showing-sidebar-p)
                (dired-sidebar-show-sidebar))
            (dired-sidebar-toggle-sidebar))
          (when (buffer-file-name)
            (let* ((filename (expand-file-name (buffer-file-name)))
                   (current-root (expand-file-name (replace-regexp-in-string "^:" "" (buffer-name (dired-sidebar-buffer))))))
              (select-window (get-buffer-window (dired-sidebar-buffer)))
              (if (s-starts-with? current-root filename)
                  (let* ((omitmode dired-omit-mode))
                    (dired-omit-mode -1) ;; make sure to switch off omit mode for cursor placement (since this is disrupted otherwise)
                    (dired-sidebar-point-at-file filename current-root)
                    (when omitmode (dired-omit-mode t))))))))
      (progn
        (setq truncate-partial-width-windows 20) ;; ensure that windows smaller than 20 truncate long lines
        (setq dired-sidebar-width (min 70 (/ (* 60 (frame-width)) (/ 1920 (default-font-width)))))
        (setq dired-sidebar-one-instance-p t) ;; ensure one instance of sidebar per frame
        (setq dired-sidebar-icon-scale (/ (* 0.2 (frame-width)) (/ 1920 (default-font-width)))) ;;
        (setq dired-sidebar-theme 'vscode)
        (setq dired-sidebar-follow-file-at-point-on-toggle-open t)
        (setq dired-sidebar-should-follow-file nil) ;; follow file in dired sidebar tree, put that on a hotkey
        (setq dired-sidebar-use-term-integration nil) ;; get workdir by dired root (direnv is called a bit too often)
        ))

  #+end_src
* grep
  #+begin_src emacs-lisp
    (eval-after-load 'grep
      '(progn
         (add-to-list 'grep-find-ignored-directories "tmp")
         (add-to-list 'grep-find-ignored-directories "build")
         (add-to-list 'grep-find-ignored-directories "node_modules")
         (add-to-list 'grep-find-ignored-directories ".bundle")
         (add-to-list 'grep-find-ignored-directories "auto")
         (add-to-list 'grep-find-ignored-directories "elpa")))

  #+end_src
* counsel
  #+begin_src emacs-lisp
    (use-package counsel
      :ensure t
      :bind (( "M-x"     . counsel-M-x)
             ( "C-x C-f" . counsel-find-file)
             ( "s-f"     . counsel-buffer-or-recentf)
             ( "C-c g h" . counsel-git-grep)
             ( "C-c g i" . counsel-rg)
             ( "C-x d"   . counsel-dired)
             ( "C-x 8 <RET>" . counsel-unicode-char)
             ( "s-i"     . counsel-imenu)
             :map comint-mode-map
             ( "<M-up>"  . counsel-shell-history )
             :map org-mode-map
             ( "s-i"     . counsel-org-goto))
      :config
      (progn
        (bind-key "M-y" #'counsel-yank-pop ) ;; no :bind, since counsel needs to be loaded for magit
        (when-let ((initial-ivy-input (assoc 'counsel-M-x ivy-initial-inputs-alist)))
          (setcdr initial-ivy-input "")) ;; remove ^ from input
        (setq counsel-grep-swiper-limit 3000000)))
    (use-package counsel-bbdb
      :ensure t)
    (use-package counsel-css
      :ensure t)
    (use-package counsel-jq
      :ensure t)
    (use-package counsel-org-capture-string
      :ensure t)
    (use-package counsel-projectile
      :ensure t)
    (use-package counsel-tramp
      :ensure t)
  #+end_src
* ivy
  #+begin_src emacs-lisp
    (require 'comint)
    (use-package ivy
      :ensure t
      :diminish
      :bind (( "C-x C-b" . ivy-switch-buffer) ;; exwm-workspace-switch-to-buffer
             ( "s-1"     . gb/ivy--program-select-and-run)
             ( "s-b" . ivy-switch-buffer)
             ( "s-f" . counsel-buffer-or-recentf)
             :map ivy-mode-map
             ("M-y" . #'counsel-yank-pop)
             :map ivy-minibuffer-map
             ("M-y" . #'ivy-next-line ))
      :custom ((ivy-sort-functions-alist ;; sort candidates for the given functions accordingly
                '((counsel-minor . ivy-string<)
                  (counsel-colors-web . ivy-string<)
                  (counsel-unicode-char . ivy-string<)
                  (counsel-register . ivy-string<)
                  (counsel-mark-ring . ivy-string<)
                  (counsel-file-register . ivy-string<)
                  (counsel-describe-face . ivy-string<)
                  (counsel-info-lookup-symbol . ivy-string<)
                  (counsel-apropos . ivy-string<)
                  (counsel-describe-symbol . ivy-string<)
                  (read-file-name-internal . ivy-prescient-sort-function)
                  (counsel-shell-history) ;; no sorting of shell history
                  (counsel-yank-pop) ;; no sorting of clipboard
                  (t . ivy-prescient-sort-function)))
               (ivy--display-transformers-list '())
               (ivy-display-style 'fancy)
               (ivy-height 45 "default height of ivy completion")
               (ivy-use-selectable-prompt t "make prompt a selectable option"))
      :config
      (defface ivy-current-match
        '((((class color) (background light))
           :background "#1a4b77" :foreground "white")
          (((class color) (background dark))
           :background "#65a7e2" :foreground "black"))
        "Face used by Ivy for highlighting first match.")


      (defun gb/ivy-partial-or-done ()
        (interactive)
        (or (ivy-partial)
           (ivy-alt-done)))

      (define-key ivy-minibuffer-map (kbd "TAB") 'gb/ivy-partial-or-done)

      :init
      (defun gb/collect-external-commands (sort)
        "collect external commands"
        (cl-loop
         for dir in (split-string (getenv "PATH") path-separator)
         when (and (file-exists-p dir) (file-accessible-directory-p dir))
         for lsdir = (cl-loop for i in (directory-files dir t)
                              for bn = (file-name-nondirectory i)
                              when (and (not (member bn completions))
                                      (not (file-directory-p i))
                                      (file-executable-p i))
                              collect bn)
         append lsdir into completions
         finally return
         (if sort (sort completions 'string-lessp) completions)))

      (defvar gb/external-commands nil)

      (defun gb/exwm--switch-or-run-sel (program &optional alias)
        "switch to this program if already open or start it"
        ;; (exwm-reset)
        (unless (gb/exwm--switch program alias)
          (start-process-shell-command program nil program)
          (run-at-time 1 nil `(lambda () (gb/exwm--switch ,program)))))

      (defun gb/ivy--program-select-and-run ()
        (interactive)
        (unless gb/external-commands
          (setq gb/external-commands (cl-remove-duplicates (gb/collect-external-commands nil))))
        (gb/exwm--switch-or-run-sel
         (completing-read "RunProgram: " gb/external-commands nil t)))

      )
    (use-package swiper
      :ensure t
      :after ( ivy)
      :bind (( "s-s" . swiper)))
    (use-package ivy-rich
      :ensure t
      :config
      (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
      (memoize #'ivy-rich-switch-buffer-project 5)
      (memoize #'ivy-rich-switch-buffer-path 5))
    (use-package all-the-icons-ivy
      :ensure t)
    (use-package all-the-icons-ivy-rich
      :config
      (setq ivy-rich-display-transformer--buffer
            '(:columns
              ((all-the-icons-ivy-rich-buffer-icon)
               (ivy-rich-candidate
                (:width 40))
               (ivy-rich-switch-buffer-size
                (:width 7))
               (ivy-rich-switch-buffer-indicators
                (:width 4 :face error :align right))
               (ivy-rich-switch-buffer-major-mode
                (:width 20 :face warning))
               (ivy-rich-switch-buffer-project
                (:width 25 :face success))
               (ivy-rich-switch-buffer-path
                (:width
                 (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.5))))))
              :predicate
              (lambda (cand) (get-buffer cand))
              :delimiter "	"))
      (setq ivy-rich-display-transformers-list
            `(ivy-switch-buffer
              ,ivy-rich-display-transformer--buffer
              ivy-switch-buffer-other-window
              ,ivy-rich-display-transformer--buffer
              counsel-switch-buffer
              ,ivy-rich-display-transformer--buffer
              counsel-switch-buffer-other-window
              ,ivy-rich-display-transformer--buffer
              counsel-M-x
              (:columns
               ((all-the-icons-ivy-rich-function-icon)
                (counsel-M-x-transformer
                 (:width 40))
                (ivy-rich-counsel-function-docstring
                 (:face font-lock-doc-face))))
              counsel-describe-function
              (:columns
               ((all-the-icons-ivy-rich-function-icon)
                (counsel-describe-function-transformer
                 (:width 40))
                (ivy-rich-counsel-function-docstring
                 (:face font-lock-doc-face))))
              counsel-describe-variable
              (:columns
               ((all-the-icons-ivy-rich-variable-icon)
                (counsel-describe-variable-transformer
                 (:width 40))
                (ivy-rich-counsel-variable-docstring
                 (:face font-lock-doc-face))))
              counsel-describe-symbol
              (:columns
               ((all-the-icons-ivy-rich-symbol-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-set-variable
              (:columns
               ((all-the-icons-ivy-rich-variable-icon)
                (counsel-describe-variable-transformer
                 (:width 40))
                (ivy-rich-counsel-variable-docstring
                 (:face font-lock-doc-face))))
              counsel-apropos
              (:columns
               ((all-the-icons-ivy-rich-symbol-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-info-lookup-symbol
              (:columns
               ((all-the-icons-ivy-rich-symbol-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-descbinds
              (:columns
               ((all-the-icons-ivy-rich-keybinding-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-find-file
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (ivy-read-file-transformer))
               :delimiter "	")
              counsel-file-jump
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-dired
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (ivy-read-file-transformer))
               :delimiter "	")
              counsel-dired-jump
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-el
              (:columns
               ((all-the-icons-ivy-rich-symbol-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-fzf
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-git
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-recentf
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (ivy-rich-candidate
                 (:width 0.8))
                (ivy-rich-file-last-modified-time
                 (:face font-lock-comment-face)))
               :delimiter "	")
              counsel-buffer-or-recentf
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (counsel-buffer-or-recentf-transformer
                 (:width 0.65))
                (ivy-rich-file-last-modified-time
                 (:face font-lock-comment-face)))
               :delimiter "	")
              counsel-bookmark
              (:columns
               ((all-the-icons-ivy-rich-bookmark-type)
                (all-the-icons-ivy-rich-bookmark-name
                 (:width 40))
                (all-the-icons-ivy-rich-bookmark-info))
               :delimiter "	")
              counsel-bookmarked-directory
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-package
              (:columns
               ((all-the-icons-ivy-rich-package-icon)
                (ivy-rich-candidate
                 (:width 30))
                (all-the-icons-ivy-rich-package-version
                 (:width 16 :face font-lock-comment-face))
                (all-the-icons-ivy-rich-package-archive-summary
                 (:width 7 :face font-lock-builtin-face))
                (all-the-icons-ivy-rich-package-install-summary
                 (:face font-lock-doc-face)))
               :delimiter "	")
              counsel-fonts
              (:columns
               ((all-the-icons-ivy-rich-font-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-major
              (:columns
               ((all-the-icons-ivy-rich-function-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-find-library
              (:columns
               ((all-the-icons-ivy-rich-library-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-load-library
              (:columns
               ((all-the-icons-ivy-rich-library-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-load-theme
              (:columns
               ((all-the-icons-ivy-rich-theme-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-world-clock
              (:columns
               ((all-the-icons-ivy-rich-world-clock-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-tramp
              (:columns
               ((all-the-icons-ivy-rich-tramp-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-git-checkout
              (:columns
               ((all-the-icons-ivy-rich-git-branch-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-list-processes
              (:columns
               ((all-the-icons-ivy-rich-process-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-projectile-switch-project
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-projectile-find-file
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (counsel-projectile-find-file-transformer))
               :delimiter "	")
              counsel-projectile-find-dir
              (:columns
               ((all-the-icons-ivy-rich-project-icon)
                (counsel-projectile-find-dir-transformer))
               :delimiter "	")
              counsel-minor
              (:columns
               ((all-the-icons-ivy-rich-mode-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-imenu
              (:columns
               ((all-the-icons-ivy-rich-imenu-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-cd
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              counsel-company
              (:columns
               ((all-the-icons-ivy-rich-company-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              package-install
              (:columns
               ((all-the-icons-ivy-rich-package-icon)
                (ivy-rich-candidate
                 (:width 30))
                (ivy-rich-package-version
                 (:width 16 :face font-lock-comment-face))
                (ivy-rich-package-archive-summary
                 (:width 7 :face font-lock-builtin-face))
                (ivy-rich-package-install-summary
                 (:face font-lock-doc-face)))
               :delimiter "	")
              package-reinstall
              (:columns
               ((all-the-icons-ivy-rich-package-icon)
                (ivy-rich-candidate
                 (:width 30))
                (ivy-rich-package-version
                 (:width 16 :face font-lock-comment-face))
                (ivy-rich-package-archive-summary
                 (:width 7 :face font-lock-builtin-face))
                (ivy-rich-package-install-summary
                 (:face font-lock-doc-face)))
               :delimiter "	")
              package-delete
              (:columns
               ((all-the-icons-ivy-rich-package-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              persp-switch-to-buffer
              ,ivy-rich-display-transformer--buffer
              persp-switch
              (:columns
               ((all-the-icons-ivy-rich-project-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              persp-frame-switch
              (:columns
               ((all-the-icons-ivy-rich-project-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              persp-window-switch
              (:columns
               ((all-the-icons-ivy-rich-project-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              persp-kill
              (:columns
               ((all-the-icons-ivy-rich-project-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              persp-save-and-kill
              (:columns
               ((all-the-icons-ivy-rich-project-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              persp-import-buffers
              (:columns
               ((all-the-icons-ivy-rich-project-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              persp-import-win-conf
              (:columns
               ((all-the-icons-ivy-rich-project-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              persp-kill-buffer
              (:columns
               ((all-the-icons-ivy-rich-buffer-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              persp-remove-buffer
              (:columns
               ((all-the-icons-ivy-rich-buffer-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              persp-add-buffer
              (:columns
               ((all-the-icons-ivy-rich-buffer-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              all-the-icons-ivy-rich-kill-buffer
              (:columns
               ((all-the-icons-ivy-rich-buffer-icon)
                (ivy-rich-candidate))
               :delimiter "	")
              treemacs-projectile
              (:columns
               ((all-the-icons-ivy-rich-file-icon)
                (ivy-rich-candidate))
               :delimiter "	")))
      (ivy-rich-mode 1)
      :ensure t)

    (use-package prescient
      :after (counsel)
      :ensure t
      :custom
      (prescient-aggressive-file-save t)
      (prescient-persist-mode t))

    (use-package ivy-prescient
      :after (counsel prescient)
      :ensure t
      :custom ((ivy-prescient-sort-commands '(:not counsel-git-log swiper swiper-isearch ivy-switch-buffer))
               (prescient-filter-method '(literal regexp initialism fuzzy)))
      :config
      (require 'counsel)
      (ivy-prescient-mode 1))


    (use-package mini-frame
      :load-path "~/repo/emacs-mini-frame"
      :config
      (custom-set-variables
       '(mini-frame-internal-border-color "#654865")
       '(mini-frame-completions-show-parameters
         '((top . 0.7)
           (width . 0.5)
           (left . 0.5)
           (height . 1)
           (background-color . "#251825")
           (border-color . "#654865")))
       '(mini-frame-show-parameters
         '((top . 0.7)
           (width . 0.5)
           (left . 0.5)
           (height . 1)
           (background-color . "#251825")
           (border-color . "#654865"))))

      (setq mini-frame--command-adjusted-show-parameters
            '((counsel-buffer-or-recentf (width . 0.8))
              (gb/ivy--program-select-and-run (width . 0.2))
              (ivy-switch-buffer (width  . 0.8))
              (counsel-git-grep (width .  0.8))
              (counsel-ag-popup-search-here (width . 0.9))
              (counsel-ag-popup-search (width . 0.9))))

      (setq mini-frame-ignore-commands
            '(
              helm-for-files
              helm-M-x
              helm-find-files
              helm-mini
              helm-imenu-anywhere
              byte-compile-file
              gb/helm-bufler-switch
              helm-org-in-buffer-headings
              helm-imenu-anywhere
              gb/exwm-program-select
              embark-keymap-help
              embark--completing-read-map
              ignore
              calcDigit-start
              helm-swoop
              helm-switch-shell
              helm-multi-swoop
              helm-multi-swoop-all
              helm-cmd-t
              helm-cmd-t-repos))
      (when (eq gb/completion-framework 'ivy)
        (mini-frame-mode 0)))


  #+end_src
* buffer kill
  #+begin_src emacs-lisp
    (defun gb/kill-a-buffer-and-delete-window (askp)
      "kill the current buffer and remove the window"
      (interactive "P")
      (gb/kill-a-buffer askp)
      ;; only called without prefix argument and not the root window of the frame
      (unless (or askp (frame-root-window-p (get-buffer-window)))
        (ignore-errors
          (delete-window))))

    (defun gb/kill-a-buffer (askp)
      "kill the current buffer (ask if prefix argument is given)"
      (interactive "P")
      (if askp
          (kill-buffer (completing-read "Kill buffer: " (mapcar #'buffer-name (buffer-list))))
        (if (string= (buffer-name) "*scratch*")
            (message "scratch buffer must be killed explicitly (with prefix argument, then selecting the buffer)")
          (kill-buffer (current-buffer)))))

    (global-set-key (kbd "C-x k") 'gb/kill-a-buffer)
    (global-set-key (kbd "C-x C-k") 'gb/kill-a-buffer-and-delete-window)

  #+end_src
* lsp
  #+begin_src emacs-lisp
    (when (version< emacs-version "28")
      ;; starting with emacs 28, jsonrpc is internal and does not need to be loaded here
      (use-package jsonrpc
        :ensure t))
    (use-package eglot
      :ensure t
      :config
      (setq eglot-connect-timeout 240) ;; eglot takes some time to start if the project is complex
      (setq eglot-send-changes-idle-time 3) ;; wait 3s idle before contacting language server
      ;; (flymake-mode-off)
      ;; (flycheck-mode 1)
      )
  #+end_src
* editing
  #+begin_src emacs-lisp
    (use-package adaptive-wrap
      :custom (adaptive-wrap-extra-indent 2)
      :config (adaptive-wrap-prefix-mode))

    (use-package lispy
      :ensure t
      :bind (("C-1" . lispy-describe-inline)) ;; make C-1 available even without lispy mode!
      :after ( hydra iedit)
      :config
      (cond
       ((eq gb/theme-mode 'light) nil) ;; TODO complete
       (t (progn
            (--each '((lispy-face-hint ((t (:background "gray20" :foreground "#fff3bc")))))
              (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it)))))))

    (use-package paredit
      :ensure t
      :diminish
      :init
      (progn
        (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
        (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
        (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
        (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
        (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
        (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
        (add-hook 'clojure-mode-hook          #'enable-paredit-mode)))

    (use-package expand-region
      :ensure t
      :bind (("C-x <up>" . er/expand-region)
             ("C-x <C-up>" . er/expand-region)
             ("C-x <down>" . er/contract-region)
             ("C-x <C-down>" . er/contract-region))
      ;; :after (key-chord) ;; optional, install key chords that do region expansion/shrink
      ;; :defer t ;; valid since init script registeres keys
      :init
      (autoload 'expand-region "er/expand-region" nil t)
      (autoload 'expand-region "er/contract-region" nil t)

      ;; (when (package-installed-p 'key-chord)
      ;;   (key-chord-define-global "ü+"   'er/expand-region) ;; make the current selection expand to the next outer bounds
      ;;   (key-chord-define-global "]["   'er/expand-region) ;; make the current selection expand to the next outer bounds
      ;;   (key-chord-define-global ".-"   'er/contract-region) ;; make the current selection collapse again into the inner bounds
      ;;   (key-chord-define-global "./"   'er/contract-region))
      )

    (save-place-mode +1)
    (setq save-place-file (concat user-emacs-directory "places"))
    (use-package editorconfig
      :ensure t
      :diminish
      :config (editorconfig-mode 1))

    (use-package highlight-indent-guides
      :ensure t
      :init ;; (add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
      :config
      (progn
        (set-face-background 'highlight-indent-guides-odd-face "darkgray")
        (set-face-background 'highlight-indent-guides-even-face "dimgray")
        (setq highlight-indent-guides-character ?\|)
        (setq highlight-indent-guides-method 'character)))

    (setq fill-column 140)
    (set-default 'fill-column 140)
    (set-default 'display-fill-column-indicator t)
    (set-default 'display-fill-column-indicator-character 9474)

    (cond
     ((eq gb/theme-mode 'light) nil) ;; TODO complete
     (t (progn
          (--each '((fill-column-indicator ((t (:foreground "gray13"))))
                    (fill-column-indicator-face ((t (:foreground "gray20")))))
            (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it))))))
  #+end_src
** folding
   #+begin_src emacs-lisp
     (use-package yafolding
       :ensure t
       :hook (prog-mode . yafolding-mode)
       :bind (("C-<return>" . yafolding-toggle-element))
       :config
       (advice-add 'yafolding-hide-region :after #'(lambda (&rest args) (when (and (fboundp 'minimap-mode) minimap-mode) (minimap-sync-overlays))))
       (advice-add 'yafolding-show-region :after #'(lambda (&rest args) (when (and (fboundp 'minimap-mode) minimap-mode) (minimap-sync-overlays)))))

   #+end_src
* checking
  #+begin_src emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (setq flycheck-check-syntax-automatically '(idle-change save mode-enabled new-line))
      :config
      (progn
        (flycheck-define-checker proselint
          "A linter for prose."
          :command ("proselint" source-inplace )
          :error-patterns ((warning line-start (file-name) ":" line ":" column ": " (id (one-or-more (not (any " ")))) (message (one-or-more not-newline) (zero-or-more "\n" (any " ") (one-or-more not-newline))) line-end))
          :modes (text-mode markdown-mode gfm-mode org-mode message-mode))

        (if (fboundp 'flycheck-relevant-error-other-file-p) ;; error comes up especially when using proselint
            (advice-add 'flycheck-relevant-error-other-file-p :override (lambda (&rest args) nil))
          (defun flycheck-relevant-error-other-file-p (&rest args) ""))

        (define-key flycheck-mode-map flycheck-keymap-prefix nil)
        (setq flycheck-keymap-prefix (kbd "C-c k"))
        (define-key flycheck-mode-map flycheck-keymap-prefix
          flycheck-command-map)
        ;; (add-hook 'after-init-hook 'global-flycheck-mode)
        ))
  #+end_src
* web javascript typescript vue
  #+begin_src emacs-lisp

    (when (package-installed-p 'org)
      (use-package ob-typescript
        :ensure t))

    (use-package json-mode
      :ensure t)

    (use-package web-mode
      :ensure t
      :mode (("\\.phtml\\'" . web-mode)
             ("\\.tpl\\.php\\'" . web-mode)
             ("\\.[agj]sp\\'" . web-mode)
             ("\\.as[cp]x\\'" . web-mode)
             ("\\.erb\\'" . web-mode)
             ("\\.mustache\\'" . web-mode)
             ("\\.dhtml\\'" . web-mode)
             ("\\.html?\\'" . web-mode))
      :custom ((web-mode-enable-auto-identation nil)
               (web-mode-markup-indent-offset 2)
               (web-mode-css-indent-offset 2)
               (web-mode-code-indent-offset 2))
      :bind (:map web-mode-map
                  ("C-c C-h" . gb/shell-pop-new)
                  ("H-f" . web-mode-buffer-fontify)))

    (use-package add-node-modules-path
      :ensure t)

    (use-package ts-comint
      :ensure t
      :commands run-tsun run-ts
      :after ( typescript-mode)
      :init
      (setenv "NODE_NO_READLINE" "1")
      (defun run-tsun ()
        (interactive)
        (let ((buf (get-buffer "*Typescript*")))
          (if buf
              (switch-to-buffer buf)
            (progn
              (ansi-term (s-trim (shell-command-to-string "command -v bash")) "Typescript")
              (comint-send-string "*Typescript*" "tsun\n")))))
      (add-hook 'typescript-mode-hook
                (lambda ()
                  (local-set-key (kbd "C-x C-e") 'ts-send-last-sexp)
                  (local-set-key (kbd "C-M-x") 'ts-send-last-sexp-and-go)
                  (local-set-key (kbd "C-c b") 'ts-send-buffer)
                  (local-set-key (kbd "C-c C-b") 'ts-send-buffer-and-go)
                  (local-set-key (kbd "C-c l") 'ts-load-file-and-go))))

    (use-package typescript-mode
      :ensure t
      :mode (("\\.tsx?\\'" . typescript-mode)))

    (use-package tide
      :ensure t
      :after ( typescript-mode)
      :init (progn
              (add-hook 'typescript-mode-hook #'gb/setup-tide-mode)
              (add-hook 'js-mode-hook #'gb/setup-tide-mode)
              ;; (add-hook 'tide-mode-hook #'gb/setup-tide-mode)
              (add-hook 'web-mode-hook
                        (lambda ()
                          (when (string-equal "tsx" (file-name-extension buffer-file-name))
                            (gb/setup-tide-mode))))
              )
      :config
      (progn
        (defun gb/setup-tide-mode ()
          (interactive)
          (tide-setup)
          (flycheck-mode +1)
          (setq flycheck-check-syntax-automatically '(save mode-enabled))
          (eldoc-mode +1)
          (tide-hl-identifier-mode +1)
          (company-mode +1)
          (subword-mode +1))

        ;; aligns annotation to the right hand side
        (setq company-tooltip-align-annotations t)

        ;; use 4 for indent
        (setq typescript-indent-level 2)
        (setq json-reformat:indent-width 2)
        (setq js-indent-level 2)

        (add-hook 'js-mode-hook #'gb/setup-tide-mode)
        ;; configure javascript-tide checker to run after your default javascript checker
        (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)

        ;; configure jsx-tide checker to run after your default jsx checker
        (flycheck-add-mode 'javascript-eslint 'web-mode)
        (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
        ;; formats the buffer before saving
        ;; (add-hook 'before-save-hook 'tide-format-before-save)
        ))

    ;; npm install vls -g
    (when (and (package-installed-p 'eglot) (package-installed-p 'web-mode) (executable-find "vls"))
      (require 'web-mode)
      (require 'eglot)
      (define-derived-mode gb/vue-mode web-mode "gbVue"
        "A major mode derived from web-mode, for editing .vue files with LSP support.")
      (add-to-list 'auto-mode-alist '("\\.vue\\'" . gb/vue-mode))
      (add-hook 'gb/vue-mode-hook #'eglot-ensure)
      (add-to-list 'eglot-server-programs '(gb/vue-mode "vls")))

    (use-package prettier
      :ensure t
      :hook (after-init-hook . global-prettier-mode))
  #+end_src
* project
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :config (setq projectile-switch-project-action #'projectile-commander) )

    (use-package project
      :config (setq project-switch-commands '()))
  #+end_src
* util functions
  - de/encode url (parameter)
    #+begin_src emacs-lisp
      (defun func-region (start end func)
        "run a function over the region between START and END in current buffer."
        (save-excursion
          (let ((text (delete-and-extract-region start end)))
            (insert (funcall func text)))))

      (defun url-encode-region (start end)
        "urlencode the region between START and END in current buffer."
        (interactive "r")
        (func-region start end #'url-hexify-string))

      (defun url-decode-region (start end)
        "de-urlencode the region between START and END in current buffer."
        (interactive "r")
        (func-region start end #'url-unhex-string))
    #+end_src
  - remove dos eol
    #+begin_src emacs-lisp
      (defun gb/remove-dos-eol ()
        "Do not show ^M in files containing mixed UNIX and DOS line endings.
                    This is especially useful when viewing diffs in magit!"
        (interactive)
        (setq buffer-display-table (make-display-table))
        (aset buffer-display-table ?\^M []))

    #+end_src
* scrolling and minimap
  #+begin_src emacs-lisp
    (use-package sublimity
      :ensure t
      :config
      (progn
        ;; enable smooth scrolling
        (require 'sublimity-scroll)

        ;; make sure not to use sublimity in the following modes
        ;; all terminal modes (does reposition to the bottom)
        ;; pdf view mode (does mix up left and right scrolling if active, since repositioning does not work here)
        ;; TODO error?
        ;; (add-to-list 'sublimity-handle-scroll-criteria '(not (memq major-mode (list 'ansi-term-mode 'term-mode 'shell-mode 'pdf-view-mode 'image-mode))))

        (setq sublimity-auto-hscroll-mode t)
        (setq sublimity-scroll-drift-length 3)
        (setq sublimity-scroll-weight 3)
        (setq auto-hscroll-mode t) ;; does not work in sublimity scroll mode
        ;; minimap is explicitly not enabled, since another minimap-mode is used for that
        ;; enable minimap
        ;; (require 'sublimity-map)
        ;; show minimap after x seconds of inactivity
        ;; (sublimity-map-set-delay 3)

        (sublimity-mode 1)))

    (use-package minimap
      :ensure t
      :bind (("s-m" . minimap-mode))
      :config
      (progn
        (setq minimap-major-modes (quote (prog-mode org-mode nxml-mode)))
        (setq minimap-window-location (quote right))
        (cond
         ((eq gb/theme-mode 'light) nil) ;; TODO complete
         (t (progn
              (--each '((minimap-active-region-background ((t (:extend t :background "gray23")))))
                (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it)))))))

  #+end_src
* window layout and movement
  #+begin_src emacs-lisp
    (use-package maxframe
      :config
      (progn
        ;; remove defined alias
        (defalias 'mf nil)))

    (use-package transpose-frame
      :bind (
             ("C-s-+" . flip-frame) ;; exchange top with bottom windows (german layout)
             ("C-s-]" . flip-frame) ;; us layout
             ("C-s-#" . flop-frame) ;; exchange right with left windows
             ("C-s-'" . flop-frame) ;; us layout
             ("C-s--" . transpose-frame) ;; exchange splitted vertically with splitted horizontally window
             ("C-s-/" . transpose-frame) ;; us layout
             )
      :ensure t)

    (require 'windmove)

    (defun gb/remove-upper-window ()
      ""
      (interactive)
      (if-let (upper-window (windmove-find-other-window 'up))
          (delete-window upper-window)))

    (defun gb/remove-lower-window ()
      ""
      (interactive)
      (if-let (lower-window (windmove-find-other-window 'down))
          (delete-window lower-window)))

    (defun gb/remove-left-window ()
      ""
      (interactive)
      (if-let (left-window (windmove-find-other-window 'left))
          (let ((width (window-total-width left-window)))
            (delete-window left-window)
            (when (not (frame-root-window-p (get-buffer-window)))
              (window-resize (get-buffer-window) width t)))))

    (defun gb/remove-right-window ()
      ""
      (interactive)
      (if-let (right-window (windmove-find-other-window 'right))
          (delete-window right-window)))


    (defvar gb/time-of-last-redisplay-s nil
      "time as float, redisplay took the last time (in s)")

    (defun gb/speeds-based-on-last-redisplay (val repetition)
      (let* ((actual-repetition (min repetition (max 1 (floor (/ repetition (/ (max 0.0001 (or gb/time-of-last-redisplay-s 0.1)) 0.1))))))
             (actual-val (floor (* val (/ repetition (float actual-repetition)))))
             result)
        (dotimes (i actual-repetition)
          (push actual-val result))
        result))

    ;; do window enlarge and shrink
    (defun shrink-window-horizontally-effect (&optional divider)
      "shrink window within a frame with visual effect"
      (interactive)
      (let ((cols (/ (frame-width) (or divider 25))))
        (save-excursion
          (let ((speeds (gb/speeds-based-on-last-redisplay cols 3)))
            (dolist (speed speeds)
              (shrink-window-horizontally speed)
              (force-window-update (selected-window))
              (setq gb/time-of-last-redisplay-s
                    (measure-time
                     (redisplay))))))))

    (defun enlarge-window-horizontally-effect (&optional divider)
      "enlarge window within frame with visual effect"
      (interactive)
      (let ((cols (/ (frame-width) (or divider 25))))
        (save-excursion
          (let ((speeds (gb/speeds-based-on-last-redisplay cols 3)))
            (dolist (speed speeds)
              (enlarge-window-horizontally speed)
              (force-window-update (selected-window))
              (setq gb/time-of-last-redisplay-s
                    (measure-time
                     (redisplay))))))))

    (defun enlarge-window-effect (&optional divider)
      "enlarge window vertically with visual effect"
      (interactive)
      (let ((lines (/ (frame-height) (or divider 25))))
        (save-excursion
          (let ((speeds (gb/speeds-based-on-last-redisplay lines 3)))
            (dolist (speed speeds)
              (enlarge-window speed)
              (force-window-update (selected-window))
              (setq gb/time-of-last-redisplay-s
                    (measure-time
                     (redisplay))))))))

    (defun shrink-window-effect (&optional divider)
      "shrink window vertically with visual effect"
      (interactive)
      (let ((lines (/ (frame-height) (or divider 25))))
        (save-excursion
          (let ((speeds (gb/speeds-based-on-last-redisplay lines 3)))
            (dolist (speed speeds)
              (shrink-window speed)
              (force-window-update (selected-window))
              (setq gb/time-of-last-redisplay-s
                    (measure-time
                     (redisplay))))))))

    (setq mouse-wheel-scroll-amount '(0.01))

    (progn

      ;; select window (left,right,up or down) relative to current window
      (bind-key "s-<left>" 'windmove-left)
      (bind-key "s-<right>" 'windmove-right)
      (bind-key "s-<up>" 'windmove-up)
      (bind-key "s-<down>" 'windmove-down)

      (bind-key "C-M-s-<left>" 'windmove-swap-states-left)
      (bind-key "C-M-s-<right>" 'windmove-swap-states-right)
      (bind-key "C-M-s-<up>" 'windmove-swap-states-up)
      (bind-key "C-M-s-<down>" 'windmove-swap-states-down)

      ;; shrink selected window horizontally
      (bind-key "C-s-<left>" 'shrink-window-horizontally-effect)
      (bind-key "C-S-s-<left>" '(lambda () (interactive) (shrink-window-horizontally-effect 50)))
      ;; enlarge selected window horizontally
      (bind-key "C-s-<right>" 'enlarge-window-horizontally-effect)
      (bind-key "C-S-s-<right>" '(lambda () (interactive) (enlarge-window-horizontally-effect 50)))
      ;; shrink selected window vertically
      (bind-key "C-s-<down>" 'shrink-window-effect)
      (bind-key "C-S-s-<down>" '(lambda () (interactive) (shrink-window-effect 50)))
      ;; enlarge slected window vertically
      (bind-key "C-s-<up>" 'enlarge-window-effect)
      (bind-key "C-S-s-<up>" '(lambda () (interactive) (enlarge-window-effect 50)))

      ;; ;; maximize selected window
      (bind-key "C-s-<return>" 'maximize-window)
      ;; ;; balance all windows and the set speedbar to 50 width
      (bind-key "C-s-<backspace>" 'balance-windows)

      ;; Key binding to use "hippie expand" for text autocompletion
      ;; http://www.emacswiki.org/emacs/HippieExpand
      (bind-key "s-7" 'hippie-expand)
      ;; Interactive search key bindings. By default, C-s runs
      ;; isearch-forward, so this swaps the bindings.
      (bind-key "C-s" 'isearch-forward-regexp) ;; currently shadowed by visual-regexp (in test)
      (bind-key "C-r" 'isearch-backward-regexp) ;; currently shadowed by visual-regexp (in test)
      ;; (bind-key "C-M-s" 'isearch-forward)
      ;; (bind-key "C-M-r" 'isearch-backward)

      ;; indent relative to the stuff on the previous line
      ;; overwrite (hide) original binding M-i tab-to-tab-stop
      ;; (global-set-key (kbd "M-i") 'indent-relative)
      (bind-key "M-i" 'indent-relative)


      (bind-key "C-c RET" 'gb/remove-dos-eol)
      (bind-key "C-c <C-return>" 'gb/remove-dos-eol)

      (bind-key "C-x C-c" 'dont-kill-emacs)

      ;; (bind-key "s-+" 'decrease-transparency)
      ;; (bind-key "s--" 'increase-transparency)
      ;; (bind-key "s-#" 'disable-transparency)
      ;; (bind-key "s-]" 'decrease-transparency)

      (bind-key "C-;" 'toggle-comment-on-line)

      (bind-key "C-x b" 'ibuffer-list-buffers-and-switch)

      ;; make sure that C-g behaves just as helm-buffer, aborting the buffer switch
      ;; TODO ibuffer mode map not known yet
      ;; (bind-key "C-g" 'quit-window ibuffer-mode-map)

      ;; (bind-key "<s-up>" 'scroll-up-line)
      ;; (bind-key "<s-down>" 'scroll-down-line)
      ;; (bind-key "<M-s-up>" 'scroll-up-line-7)
      ;; (bind-key "<M-s-down>" 'scroll-down-line-7)

      ;; (bind-key "<s-C-up>" 'scroll-up-line-and-move-cursor)
      ;; (bind-key "<s-C-down>" 'scroll-down-line-and-move-cursor)

      ;; (bind-key "<s-C-M-up>" 'scroll-up-line-and-move-cursor-7)
      ;; (bind-key "<s-C-M-down>" 'scroll-down-line-and-move-cursor-7)

      ;; (bind-key "C-h C-m" 'discover-my-major)
      )


    ;; magit git search git grep etc.

  #+end_src
* help
  #+begin_src emacs-lisp
    (use-package helpful
      :ensure t
      :commands (helpful-macro helpful-callable helpful-function helpful-command helpful-variable helpful-at-point)
      :bind ("s-h" . helpful-at-point)
            ("C-h f" . helpful-callable)
            ("C-h v" . helpful-variable))
  #+end_src
* navigation
  #+begin_src emacs-lisp
    (use-package anzu
      :ensure t
      :diminish
      :config
      (global-anzu-mode +1)
      (setq anzu-search-threshold 1000)
      (setq anzu-minimum-input-length 3))

    (use-package avy
      :ensure t
      :bind (("C-S-SPC" . avy-goto-char-timer)
             ("C-c SPC" . avy-goto-char-timer)
             ("C-c C-SPC" . avy-goto-char-timer)
             ("C-x SPC" . avy-pop-mark)
             ("C-x C-SPC" . avy-pop-mark))
      :config
      (progn
        (setq avy-background t)
        (setq avy-keys (number-sequence ?a ?z))
        (cond
         ((eq gb/theme-mode 'light) nil) ;; TODO complete
         (t (progn
              (--each '((avy-lead-face ((t (:foreground "red"))))
                        (avy-lead-face-0 ((t (:foreground "orange"))))
                        (avy-lead-face-1 ((t (:foreground "yellow"))))
                        (avy-lead-face-2 ((t (:foreground "white")))))
                (progn (add-to-list 'gb/list-of-faces-to-set it)(custom-set-faces it))))))))

    (use-package avy-zap
      :ensure t
      :after ( avy)
      :bind
      (("M-Z" . avy-zap-to-char-dwim)
       ("M-z" . avy-zap-up-to-char)))
  #+end_src
* posframe
  #+begin_src emacs-lisp
    (setq gb/posframe-offset 0)
    (defun gb/posframe-poshandler-frame-center (info)
      "Posframe's position handler.

         Get a position which let posframe stay onto its
         parent-frame's center.  The structure of INFO can
         be found in docstring of `posframe-show'."
      (cons (+ gb/posframe-offset (/ (- (plist-get info :parent-frame-width)
                                        (plist-get info :posframe-width))
                                     2))
            (/ (- (plist-get info :parent-frame-height)
                  (plist-get info :posframe-height))
               2)))

    (defun gb/posframe-poshandler-frame-center-top (info)
      "Posframe's position handler.

         Get a position which let posframe stay onto its
         parent-frame's center top.  The structure of INFO can
         be found in docstring of `posframe-show'."
      (cons (+ gb/posframe-offset (/ (- (plist-get info :parent-frame-width)
                                        (plist-get info :posframe-width))
                                     2))
            20))

    (use-package posframe
      ;; :load-path "~/repo/posframe"
      :ensure t
      :bind ("H-k" . #'gb/delete-all-open-posframes)
      :init
      (defun gb/delete-all-open-posframes ()
        "Delete all open posframes"
        (interactive)
        (dolist (frame (frame-list))
          (let ((buffer-info (frame-parameter frame 'posframe-buffer)))
            (when buffer-info
              (posframe-delete-frame (car buffer-info))
              (message (format "delete %s" (car buffer-info))))))))

  #+end_src
* pomodoro
  - pomm el - makes use of transient, showing history, too
    #+begin_src emacs-lisp
      (use-package pomm
        :ensure t
        :commands (pomm)
        :config (pomm-mode-line-mode 1)
        :custom (pomm-remaining-time-format "%.2m"))
    #+end_src
  - pomodoro
    #+begin_src emacs-lisp
      (use-package pomodoro
        :ensure t
        :commands (pomodoro-stop pomodoro-start pomodoro-pause pomodoro-resume)
        :custom
        (pomodoro-desktop-notification nil)
        (pomodoro-play-sounds nil)
        (pomodoro-sound-player "mpg123")
        (pomodoro-time-format "%.2m ")
        :config
        (pomodoro-add-to-mode-line))
    #+end_src
* ensure quick org tangle for init file
  #+begin_src emacs-lisp
    (defun gb/buffer-contains-string(str)
      "does the current buffer contain the given string?"
      (save-excursion
        (goto-char (point-min))
        (let ((search-result (re-search-forward str nil t)))
          (if search-result (point) nil))))

    ;;    - original source http://www.holgerschurig.de/en/emacs-init-tangle/

    (defun gb/speedy-emacs-init-tangle (filename)
      "This function will write all source blocks from FILENAME into
          ~/.emacs.d/init.el that are ...

          - not marked as =tangle: no=
          - doesn't have the TODO state =CANCELLED=
          - have a source-code of =emacs-lisp="
      (require 'org)
      (let* ((body-list ())
             (output-file "~/.emacs.d/init.el")
             (org-babel-default-header-args (org-babel-merge-params org-babel-default-header-args
                                                                    (list (cons :tangle output-file)))))
        (message "Writing %s ..." output-file)
        (save-restriction
          (save-excursion
            (org-babel-map-src-blocks filename
              (let* ((info (org-babel-get-src-block-info 'light))
                     (tfile (cdr (assq :tangle (nth 2 info))))
                     (match))
                (save-excursion
                  (catch 'exit
                    (org-back-to-heading t)
                    (when (looking-at org-outline-regexp)
                      (goto-char (1- (match-end 0))))
                    (when (looking-at (concat " +" org-todo-regexp "\\( +\\|[ \t]*$\\)"))
                      (setq match (match-string 1)))))
                (unless (or (string= "no" tfile)
                           (string= "CANCELED" match)
                           (not (string= "emacs-lisp" lang)))
                  (add-to-list 'body-list body)))))
          (with-temp-file output-file
            (insert (format ";; Don't edit this file, edit '%s' instead ...\n\n" filename))
            (insert (apply 'concat (reverse body-list)))
            (emacs-lisp-mode)
            (condition-case nil
                (check-parens)
              ;; error case is not executed even though user-error should be signaled if an error occurs
              (user-error (with-current-buffer (generate-new-buffer "*Generated init.el*")
                            (insert-file output-file)
                            (emacs-lisp-mode)
                            (check-parens)
                            (switch-to-buffer "*Generated init.el*")))))
          (message "Wrote %s ..." output-file))))

    (defun gb/tangle-on-save-org-mode-file()
      (when (string= major-mode "org-mode")
        (progn
          (let ((has-source-regions (gb/buffer-contains-string "^ *#\\+BEGIN_SRC"))
                (should-tangle (gb/buffer-contains-string "^#\\+PROPERTY: +header-args +:tangle"))
                (target-is-initel (gb/buffer-contains-string (concat "^#\\+PROPERTY: +header-args +:tangle +" (regexp-quote "~/.emacs.d/init.el")))))
            (if (and has-source-regions should-tangle)
                (progn
                  (when (package-installed-p 'yankpad)
                    (remove-hook 'after-change-major-mode-hook #'yankpad-local-category-to-major-mode))
                  ;; (when (package-installed-p 'pretty-mode)
                  ;;   (global-pretty-mode -1))
                  (when (bound-and-true-p ligatures-enabled)
                    (remove-hook 'prog-mode-hook
                                 #'add-fira-code-symbol-keywords))

                  (message "executing org-babel-tangle ...")
                  (if target-is-initel
                      (gb/speedy-emacs-init-tangle (buffer-file-name))
                    (let ((inhibit-message t))
                      (org-babel-tangle)))
                  (message "executing org-babel-tangle ... done.")

                  (when (bound-and-true-p ligatures-enabled)
                    (add-hook 'prog-mode-hook
                              #'add-fira-code-symbol-keywords))
                  ;; check whether readonly should be applied again
                  ;; only if currently not in detailed edit mode
                  ;; (gb/activate-properties-in-org-mode)
                  ;; the following currently takes about 3 seconds (which I don't want to spend)
                  ;;(when (package-installed-p 'pretty-mode)
                  ;;  (global-pretty-mode 1))
                  (when (package-installed-p 'yankpad)
                    (add-hook 'after-change-major-mode-hook #'yankpad-local-category-to-major-mode))))))))

    ;; execute org babel on safe (if major mode is org-mode
    (add-hook 'after-save-hook 'gb/tangle-on-save-org-mode-file)
  #+end_src
* backup
  #+begin_src emacs-lisp
    (setq backup-directory-alist `(("." . ,(expand-file-name "~/file-backups")))
          backup-by-copying t
          delete-old-versions t
          kept-new-versions 6
          kept-old-versions 2
          version-control t)

    (use-package git-backup-ivy
      :ensure t
      :config
      (add-hook 'after-save-hook (lambda () (git-backup-version-file git-backup-ivy-git-path git-backup-ivy-backup-path nil (buffer-file-name))))
      (add-to-list 'ivy-height-alist '(git-backup-ivy . 3)))
  #+end_src
* kubernetes
  #+begin_src emacs-lisp
    (use-package k8s-mode
      :ensure t)
  #+end_src
* embark
  #+begin_src emacs-lisp
    (use-package embark
      :ensure t
      :bind (("H-<SPC>" . embark-act)
             ("s-<return>" . embark-act)))
  #+end_src
* tree-sitter
  - see https://ubolonton.github.io/emacs-tree-sitter/getting-started/
  #+begin_src emacs-lisp
    (use-package tree-sitter
      :ensure t)
    (use-package tree-sitter-langs
      :ensure t
      :config
      ;; supported languages that support tree sitter highlighting
      (require 'dash)
      (--each '(typescript-mode-hook
                java-mode-hook
                javascript-mode-hook
                html-mode-hook
                scala-mode-hook
                json-mode-hook)
        (add-hook it #'tree-sitter-hl-mode)))
  #+end_src
* finish
  #+begin_src emacs-lisp
    (ido-mode -1)
    (ido-unload-function)

    (ivy-mode 1)
    (midnight-mode 1)
    (set-fringe-mode 10)
    (display-time-mode -1)
    (winner-mode 1)
    (require 'epa-file)
    (epa-file-enable)

    ;; (mini-frame-mode 1) ;; unstable if used with vterm!
  #+end_src
